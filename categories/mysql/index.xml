<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据库 on Chengji Zhao&#39;s blog</title>
    <link>https://zcj-git520.github.io/categories/mysql/</link>
    <description>Recent content in 数据库 on Chengji Zhao&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 10 Oct 2022 22:00:38 +0800</lastBuildDate><atom:link href="https://zcj-git520.github.io/categories/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>mysql之数据库索引机制与MVCC机制</title>
      <link>https://zcj-git520.github.io/p/mysql%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95%E6%9C%BA%E5%88%B6%E4%B8%8Emvcc%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Mon, 10 Oct 2022 22:00:38 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/mysql%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95%E6%9C%BA%E5%88%B6%E4%B8%8Emvcc%E6%9C%BA%E5%88%B6/</guid>
      <description>索引机制  索引是一种数据结构，索引机制是有存储引擎实现，创建索引会基于原有表的数据，从新在磁盘上创建新的本地索引文件 mysql索引机制的优势：  提高了查询速度，数量越大，效果越明显 建立唯一的索引，可确保数据表中的数据唯一性，无需额外的创建唯一的约束 在使用分组与排序时，可显著减少查询的分组和排序的时间 在多表查询时，基于主外键字段建立索引，可带来十分明显的性能的提升 索引默认是B+树有序机构，效率会明显提高 就整个数据库而言，减少sql执行时间，可提高数据库整体的吞吐量   mysql索引机制的弊端：  建立索引会生成本地磁盘文件，需要额外的空间存储索引数据，磁盘占用率会变高 写入数据时，需要额外的维护索引结构，在增删修改数据时，都需要额外的操作索引 写入数据时，维护索引需要额外的时间开销，执行sql时效率会降低，性能会下降   主键索引存在的陷阱  主键一般会使用自增的id,可确保主键不重复以及主键的唯一性，主键索引是聚簇索引，使用 b+树的索引的存储结构主键索引是有序的，若主键采用的是无序时，在插入数据可能会导致索引结构的调整 因此，主键索引最好选用顺序的值，而非随机值   联合索引存在的矛盾  在联合查询时，查询条件必须包含索引的第一个字段，在建立联合索引时，要确保建立除的来联合索引命中高，即必须包含 第一个字段   前缀索引: 可以使用一个字段的前N个字符创建索引，可以节省存储空间，但不能使用分组，排序工作，无法完成覆盖扫描等工作 全文索引存在的硬伤  全文索引是基于分组实现，分词也会被存储，会造成额外的文件，还存在在更新数据之后，索引的存储与更新的问题   唯一索引存在的快慢的问题  唯一索引查询数据比普通索引效率高，因为普通索引会查询整个索引数，唯一索引会引起立马停止检索，但插入数据则相反   索引机制中索引失效的场景  查询语句中带有or会导致索引失效 模糊查询语句中like以%开头导致索引失效 字符类型查询时不带引号导致索引失效 索引字段参与计算导致索引失效 字段被用于函数计算导致索引失效 违背最左前缀原则导致索引失效 不同字段值对比导致索引是失效 反向范围操作导致索引失效    MVCC机制  mvcc机制，即多版本并发控制技术，主要提高数据并发性能而设计，采用更好的方式处理了 读写并发冲突的问题，在有读写操作时，也不加锁，确保读操作的非阻塞的  mvcc实现原理  mvcc 是通过隐藏字段、undo-log、readView三个实现  隐藏字段：使用innodb引擎建立一张表后，数据库除了构建显示字段外，通常还会构建隐藏字段主要包括：  DB_ROW_ID: 隐藏主键，当mysql未定义主键时，会使用ROW_ID来作为聚簇索引列 DB_Deleted_Bit：删除标识，当执行delete语句时，会将这个标识deleted_Bit设置为：true/1,若后续事务回滚时，会 将deleted_Bit设置为false/0,这样就能避免树结构的调整，同时也会使用一个线程自动清理deleted_Bit为true/1的行数据 DB_TRX_ID：最近事务ID,每创建事务，都会分配一个事务ID,遵循顺序递增的特性，但删除的ID为：0 DB_ROLL_PTR：回滚指针，指向undo-log日志中旧版本的数据，通过此来找到改动前的旧版本的数据， mvcc就是利用这一点实现行数据的多版本   undo-log: 存储不仅仅一条旧版本的数据，而是存在一个版本链  readView: 多版本的并发控制，根据查询时机来选择一个当前事务可见的旧版本数据， 通常一个事务与一个readView属于一一对应的关系，一般包括四个核心内容：  creator_trx_id: 代表创建当前这个readView的事务ID trx_id: 代表在生成当前事务readView时，系统内活动的事务id列表 up_limit_id: 活跃的事务中最小的ID low_limit_id: 生成当前readView时，系统给一个事务分配的ID      实现原理和过程  当一个事务尝试改动某一条数据时，会将原本表中的数据放入undo_log日志中 当一个事务尝试查询某一条数据时，mvcc会生成一个readView快照 具体实现过程：  当事务中出现select语句时，会根据当前运行情况生成一个readView 判断行数据中的隐藏列tex_id最近事务id与readView中的当前readView的ID是否一致  若相同：读取最新版本的数据 若不相同：代表目前要查询的数据是被其他事务修改过，继续向下执行   判断最近事务id是否小于readView中的最活跃的Id  小于： 代表改动的数据的事务在创建快照前就结束了，可读取最新数据 不小于：表示改动的行数据的事务还在执行，继续往下执行   判断最近事务id是否小于事务readView中的下一个事务id  大于等于： 代表改动的行数据的事务是生成快照之后在开启的，不能访问最新数据 小于：代表改动的行数据的事务id在最小活跃ID和下一个事务的ID之间，需要进一步的判断   判断当前快照id是否在系统活跃的事务id列表中  是：表示改动的行数据的事务依旧在执行，不能访问新数据 不是：表示改动行数据的事务已经结束，可以访问最小数据     若不能访问最新版本数据时，则会访问undo-log获取旧版本中的最新数据 若存在版本链，通过roll_ptr(回滚指针)找到版本链的表头，然后遍历链表，通过就版本数据，其隐藏列最近事务id 不能在快照系统内活动事务的id中的条件返回就版本的数据      MVCC在事务隔离中机制中的作用  在事务隔离中只有RC(读已提交)和RR(可重复读)两个级别中有运用MVCC机制  在RC级别下，MVCC机制是在每次select(查询语句)执行前，都会生成一个最新的readView, 解决了数据库中的脏读的问题，但也存在不可重复读的问题 在RR级别下，MVCC机制是一个事务只会在首次执行select(查询语句)之前，才会生成一个新的readView, 后续所有查询操作都会基于着ReadView进行判断，解决了不可重复读的问题      </description>
    </item>
    
    <item>
      <title>数据库之事务机制原理</title>
      <link>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86/</link>
      <pubDate>Fri, 30 Sep 2022 22:00:38 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86/</guid>
      <description>事务的ACID原则  事务一般要满足ACID原则：  A(atomicity): 原子性 C(consistency): 一致性 I(isolation): 独立性/隔离性 D(Durability): 持久性   原子性：指一个事务组成的一组sql要么全部执行成功，要么全部执行失败 一致性：不管事务发生前后，原本的数据变化都是一致的，也就是数据库中的数据只允许从一个一致性 状态变化为另一个一致性状态，即一个事务中的所有操作，要么一起改变数据库中的数据，要么都不变，对于其他事务而言，数据 变化是一致的 独立性/隔离性: 多个事务之间都是独立的，互不影响，是基于锁的机制和mvcc机制实现的 持久性：指一个事务一旦提交，它会保持永久性，即所有更改数据库中的数据都会被写入磁盘做持久化处理 相关命令：  开启一个事务：start transaction| begin | begin work 回滚事务：rollback 提交事务：commit 关闭或开启自动提交: SET autocommit = 0|1|ON|OFF   事务回滚点：当后续操作失败时，就会回滚到该位置（当前成功的位置）  相关命令：  添加事务回滚点: savepoint point_name 回滚到指定的回滚点：rollback point_name      mysql事务隔离机制  事务隔离机制可分为四个级别：  RU(read uncommitted): 读未提交 RC(read committed): 读已提交 RR(repeatable read): 可重复读 serializable: 序列化/串行化   默认隔离级别为：可重复读 -脏读、幻读、不可重复读、脏写问题  脏读：脏读是指一个事务读到其他事务还没提交的数据，即当前事务读到的数据是其他事务未提交的数据 幻读：指同一个事务内多次查询返回的结果集不一样。比如同一个事务A，在第一次查询表的数据行数时，发现表中有n条行记录，但是第二次以同等条件查询时，却发现有n+1条记录，这就好像产生了幻觉 不可重复读: 是指一个事务中，多次读取同一个数据，先后读取数据不一致 脏写：指同一个事务同时操作同一条数据   事务隔离机制实现  读未提交  处于该级别的数据库，脏读、幻读、不可重复读都可能发生 实现机制：该级别是基于写互斥锁实现的，这个级别在写数据时，采用了互斥锁，解决脏写的问题 但是读操作不是互斥的，导致其他事务可以读到该事务未提交的数据，从而导致了脏读、幻读、不可重复读的发生   读已提交  处于该级别的数据库，解决了脏读的问题，不可重复的和幻读的问题同样存在 实现机制：该级别在基于写互斥锁的基础上，才采用了mvcc多版本并发控制即使进行读操作处理， 即mvcc版本控制不会让另一个事务读取另一个正在修改（未提交）的数据，而是返回修改之间的数据（老版本的数据） 即没有读取数据的时候，mvcc版本机制会根据事务中的查询命令快速创建一个新的readView,读取到的数据就是新的数据   可重读读  处于该级别的数据库，解决了脏读、不可重读读的问题，幻读的问题同样存在 实现机制：级别在基于读已体提交的基础上，对mvcc进行了优化，即在同一个事务中不会根据每一次查询都生成一个新的readView 而是在一个事务中只有第一次查询才创建一个readView,后续查询都使用这个readView的数据,解决了不可重读读的问题   序列化/串行化级别  处于该级别的数据库，解决了脏读、不可重复读、幻读问题 实现机制：序列化意思是将所有的事务按序排队后串行化处理，也就是操作同一张表的事务只能一个一个执行，事务在执行前需要先获取表级别的锁资源，拿到锁资源的事务才能执行，其余事务则陷入阻塞，等待当前事务释放锁     事务隔离机制的命令  查询当前数据库的隔离级别:  SELECT @@tx_isolation; show variables like &amp;lsquo;%tx_isolation%&#39;;   设置隔离级别为RU级别（当前连接生效）  set transaction isolation level read uncommitted;   设置隔离级别为RC级别（全局生效）  set global transaction isolation level read committed;   设置隔离级别为RR级别（当前连接生效）  set tx_isolation = &amp;lsquo;repeatable-read&amp;rsquo;;   设置隔离级别为最高的serializable级别（全局生效）  set global.</description>
    </item>
    
    <item>
      <title>数据库之基础知识</title>
      <link>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Wed, 21 Sep 2022 22:00:38 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>多表查询  多表一般是主表，主要存储数据的地方，每一个字段都可以重复，没有主键， 无法根据某个字段定位到准确的记录 一表一般是从表，主要存储辅助数据，通过主键与主表连接，存储的记录是不可重复的，可以通过主键定位到记录 左连接：左连接是以左表取出所有记录与右表匹配，如果没有匹配以null值代表右边的列 右连接：右连接是以右表取出所有的记录，与左表进行匹配，如果没有匹配以null值代表左边的列 内连接：等值连接，是多表的交集 交叉连接：返回两表的笛卡尔乘积，作用是计算两个表之间可能的存在的组合，结果是集中的记录等于两张各自记录数的乘积  数据库范式  范式：范式是值在设计数据库表时，需要遵循的一些原则，目的是让设计的数据库表结构更为合理和优雅，常见的数据库范式为：数据库三大范式（1NF、2NF、3NF） 和巴斯-科德范式（BCNF）  数据库的三大范式  三大范式为递进关系，即后续范式是前范式为基础上优化或者后续范式是前范式的优化  第一范式  第一范式：确保数据的原子性，也就是存储的数据具备不可在分性 原子性：原子性规定一个字段是原子，不能在进行拆分成多个字段 第一范式除了对列级别的数据生效外，对行级数据处理一样，即行数据之间相不影响，都是独立的整体 若数据库满足第一范式的影响如下：  客户端语言与表之间无法很好的生成映射关系 查询得到的数据在进行数据处理时，需要对字段数据进行额外的拆分 插入数据时，需要对字段值进行额外拼接后才能写入到数据库     第二范式  第二范式：在第一范式的基础上，要求所有的表中的所有列，其数据都需要依赖于主键，也就是一张表只存储同类型的数据，不能存在同张表中存在与主键没有关系的数据 由于数据存在与主键数据之间没有关联性，导致表中的数据存在冗余的情况 第二范式要求：每张表的业务属性具备“唯一性”，避免存在一张表存在多种业务属性的情况，即“一张表只描述一件事情”   第三范式  第三范式：在第一，第二范式的基础上，要求表中的每一列数据不能与主键外的字段存在关系 第三范式满足：表中的每个非主键字段与其他非主键字段之间，都是相互独立的，之间不存在相互依赖的关系，所有字段都依赖主键 在设计表结构中，如不满足第三范式，在操作表时就会出现异常，使得表难以维护，相反通过第三范式优化后，表结构会更加优雅灵活，也容易 维护   巴斯-科德范式  在表中除了主键外，还有联合主键，也就是有多个列组成的主键 巴斯-科德范式也称为：3.5范式，它是第三范式的补充，第三范式要求是：任何非主键字段与其他非主键字段之间存在依赖关系，即 要求非主键之间具备独立性，巴斯-科德范式要求：任何主属性不能对其他主键子集存在关系，即联合主键中的某列值，不能与联合主键的 其他列存在依赖关系 巴斯-科德范式规定联合主键之间的不存在依赖，即满足主键的独立性 例如：以classes班级字段、class_adviser班主任字段、name学生姓名字段，组合成一个联合主键，就不符合巴斯-科德范式   范式总结  第一范式：确保原子性，即保证表中的每一列数据都是不可在分的字段 第二范式：确保唯一性，即保证每张表只描述一种义务，一张表只描述一件事情 第三范式：确保非主键字段的独立性，即表中除主键外，每个字段之间不存在任何的依赖性，字段之间是独立的 巴斯-科德范式：确保主键字段(联合字段)的独立性,即任何主属性不能对其它主键存在依赖关系，联合主键之间相互独立  数据库锁机制 数据库锁机制 数据库锁分类  按照颗粒度分类：  表级锁：共享读锁和独占写锁 行级锁：共享锁(s)和排他锁(x) 页级锁   按照使用方式分类：  乐观锁 悲观锁    表级锁  开销小，加锁快，不会发生死锁，锁定颗粒度大，发生锁冲突概率高，并发度最低，mylsam和innoDB都是支持的， 读读不阻，写写阻，读写互斥，读写锁是串行的，写锁优于读锁  行级锁  开销大，加锁慢，会发生死锁，锁定颗粒度小，发生锁冲突概率低，并发度高。innoDB支持，因innodb 的行锁是基于索引的 共享锁(s锁)也叫读锁，允许多个事务读取同一个资源，不允许修改 排他锁(x锁)允许获取排他锁的事务更新数据，阻止其他事务获取相同数据的读锁和排他锁；  乐观锁  不采用数据库自身加锁的方式，通过用户程序来实现，一般采用版本号机制或者时间蹉的机制  悲观锁  对数据被其他事务的修改保持保守状态，会通过数据库自身加锁的机制实现，从而保证数据操作的排他性  间隙锁  使用范围查询而非等值查询时，并请求共享或者排他锁时，会给符合范围条件的已有数据记录的索引加锁，对于键值 在条件范围内，但不存在的记录叫做间隙锁（pap锁） 间隙锁可防止幻读和满足恢复和复制的需要  数据库死锁  死锁现象: 并发事务，本质是数据库多条线程并发执行，需要具备完善的锁机制来避免线程的不安全 但是也会造成死锁的现象 解决死锁问题  锁超时机制：事务/线程在等待资源时，超过一定时间后自动放弃等待并返回 外力介入：外部接入，将死锁情况中的某个事务/线程强制结束，让其他事务继续执行 mysql的锁超时机制：一个事务在长时间内无法获取到锁时，就主动放弃等待，默认锁超时时间为50S mysql死锁检测算法：  wait-for graph,启动后会收集两个信息，一个是锁的信息链表：目前持每个锁的事务是谁， 另一个是等待链表：阻塞的事务要等待的锁是谁 算法会从之前的事务作为起点，然后从锁的信息链表中找到对应锁的信息，然后根据锁的的持有着， 在事务等待链表中进行查找，看持有着的事务是否在等待获取其他锁，如果是则看另一个持有锁的事务是否在等待其他锁…… 直到锁的信息链表中后，是否存在闭环，若出现则介入（强制回滚其中的一个事务来达到解除死锁的问题）  回滚事务时，一般会在undo-log日志中回滚undo量少的事务，回滚代价少 通过innodb_deadlock_detect=on/off来控制是否开启了死锁检测机制     防止死锁  以固定的顺序访问表和行 大事务进行拆分 同一事务，尽可能的一次锁定 降低隔离级别 为表添加合理的索引     </description>
    </item>
    
    <item>
      <title>mysql 常用命令使用</title>
      <link>https://zcj-git520.github.io/p/mysql-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 01 Sep 2022 22:00:38 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/mysql-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</guid>
      <description>查询命令（select）  查看表结构：desc 或则show columns from tables; 查询特定的列：select column, another_column,…… FROM table; 查询所有*：select *from table; 带约束查询：SELECT column, another_column, … FROM table WHERE *condition* AND/OR *another_condition* AND/OR …**;  image-20221023144431347  对查询结果进行筛选和排序：   SQL 提供了一种使用关键字丢弃具有重复列值的行的便捷方法(DISTINCT):
SELECT**DISTINCT**column,another_column,…FROMmytableWHERE*condition(s)*;  SQL 提供了一种使用子句按给定列按升序或降序对结果进行排序的方法(ORDER BY):
SELECTcolumn,another_column,…FROMmytableWHERE*condition(s)***ORDERBYcolumnASC/DESC**;  将结果限制为子集(ORDER BYLIMITOFFSETLIMITOFFSET):
SELECTcolumn,another_column,…FROMmytableWHERE*condition(s)*ORDERBYcolumnASC/DESC**LIMITnum_limitOFFSETnum_offset**;  修改表名：alter table old_table_name rename to new_name_name;
  增加表注释：alter table table_name comment &amp;ldquo;注释&amp;rdquo;；
  增加表字段注释：alter table table_name colunm modify 字段名 类型 comment &amp;ldquo;注释&amp;rdquo;；</description>
    </item>
    
    <item>
      <title>mysql性能调优-分库分表</title>
      <link>https://zcj-git520.github.io/p/mysql%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/</link>
      <pubDate>Tue, 01 Mar 2022 22:00:38 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/mysql%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/</guid>
      <description>数据切分  当数据库中的数据或者单表数据过大时，会影响对数据库查询等操作的效率。此时可以减轻数据库的负担 可以将数据库进行拆分，即分库分表。来提高数据库的效率。 数据库有两种拆分方式：水平切分和垂直切分  垂直切分 垂直分库  垂直分库：根据业务解耦，以表为单位，将相同业务的表存储在同一数据库中。将大数据库拆分为不同的小数据库。 小数据库的结构和存储的数据不一样。小数据库的并集为大数据库。  使用场景高并发时，将数据分类到不同数据库中，提升数据库的查询效率  垂直分表  垂直分表：是以字段为单位，将表中的不常用的字段和字段名较长的字段拆分到扩展表中，其余放入到主表中。也可以经热数据放入主表，冷 数据放入拓展表。主表和拓展表的数据结构和存储的数据是不一样。将表中的进行冷热数据的拆分，减少了对磁盘io的操作，提升数据库的效率  使用场景：表的记录并不多，但是字段多，并且热点数据和非热点数据在一起，单行数据所需的存储空间较大。以至于数据库缓存的数据行减少，查询时会去读磁盘数据产生大量的随机读IO，产生IO瓶颈  优缺点  优点：业务解耦合，方便对不同业务进行管理，提升数据库的效率 缺点：部分表不能join,表中的热数据太多  水平切分 水平分库和分表  都是以字段为单位，通过哈希和随机等策略，将数据分到不同的子库或者子表中。 所有的子库和子表的数据结构一样和数据不一致，即所有子库的数据等于数据库中的数据。形成分布式的效果。  使用场景：数据量行数巨大，存在单库读写、存储性能瓶颈，数据量太多，影响了SQL效率，加重了CPU负担，以至于成为瓶颈。  优缺点  优点：提升系统稳定性和负载能力 缺点：事务一致性难以保证  数据库的瓶颈  数据库的瓶颈可分为：io瓶颈和cpu瓶颈  io瓶颈  磁盘读写io瓶颈：当热数据过多时，数据库内存(buffer Pool)保存不下时，会产生大量的io。此时就需要进行分库和垂直分表。 网络io瓶颈：请求的数据太多，网络带宽不够，此时就需要分库。  CPU瓶颈  sql中使用了大量的cpu运算的操作。此时需要优化sql,如增加索引 单表数据量大时，且进行全表扫描，查询效率低时，需要水平分表分库。   参考文献： 数据库分库分表思路</description>
    </item>
    
    <item>
      <title>mysql事务实现基本原理</title>
      <link>https://zcj-git520.github.io/p/mysql%E4%BA%8B%E5%8A%A1%E5%AE%9E%E7%8E%B0%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</link>
      <pubDate>Fri, 25 Feb 2022 22:00:38 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/mysql%E4%BA%8B%E5%8A%A1%E5%AE%9E%E7%8E%B0%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</guid>
      <description>事务  事务就是一组原子性的SQL语句.  buffer Pool  当启动mysql会开启默认为128M的内存空间来保存从磁盘获取的页的数据到这块内存空间。  InnoDB通过free链表来管理buffer Pool中的空闲页，通过控制块来指向空白页.即从磁盘中的获取的页数据通过 控制块放入到buffer Pool中对应的空闲页中。 通过flush链表来管理buffer Poll中的脏页(通过事务修改过的页)。通过链表中控制块指向脏页。 通过lru链表来对Buffer Pool中的页进行淘汰。通过头插法将最新的页插入到链表中的控制块。当buffer Pool中的页满后，删除链表最后的控制块。 也存在当全表扫描时，也造成数据的覆盖，性能下降。因此链表被划分为热数据区域(5/8)和冷数据区域(3/8)。当两次访问页的时间大于1秒时，把页放入到热数据的控制块 ，否则就放入冷数据页，避免了全表扫描造成热数据被覆盖。生成redo log后，mysql通过后台进程经将脏页持久化到磁盘。当MySQL挂了之后， 会通过redo log恢复数据。    事务具有的ACID的特性  原子性:事务中所有的操作那么全部提交成功，要么全部失败回滚 一致性：数据库总是从一个一致性状态转换到另一个一致性的状态 隔离性：一个事务在所做修改在提交前对其他事务是不可见的 持久性：一旦事务提交，说有的修改都会永久保存在数据库中  事务的隔离级别  读未提交：事务中的修改即使未提交也是对其他事务可见，这级别的事务隔离有脏读、重复读、幻读的问题。 读也提交：事务提交后所做的修改才会被另一个事务所看见，可能产生一个事务中两次查询的结果不同。 可重复读： 只有当前事务提交才能看见另一个事务的修改结果。解决了一个事务中两次查询的结果不同的问题。 可串行化：只有一个事务提交之后才会执行另一个事务。   死锁  死锁：两个或多个事务在同一资源上相互占用并请求锁定对方占用的资源，从而导致恶性循环的现象。MySQL的部分存储引擎能够检测到死锁的循环依赖并产生相应的错误。InnoDB引擎解决死锁的方案是将持有最少排它锁的事务进行回滚  MVCC原理  mvcc 多版本并发控制：指在读取数据时通过一种类似快照的方式将数据保存下来，这样读锁和写锁不冲突。是 innodb 实现事务并发与回滚的重要功能。  版本链  每次更新后，都会将旧值放到一条 undo log 中，就算是该记录的一个旧版本，随着更新次数的增多，所有的版本都会被roll_ptr 属性连接成一个链表，我们把这个链表称之为版本链，版本链的头节点就是当前记录最新的值   trx_id：每次一个事务对某条聚簇索引记录进行改动时，都会把该事务的事务id赋值给trx_id隐藏列。 roll_pointer：每次对某条聚簇索引记录进行改动时，都会把旧的版本写入到undo日志中，然后这个隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息。
 ReadView  InnoDB提出了一个ReadView的概念，这个ReadView 中有个 id 列表 trx_ids 来存储系统中当前活跃着的读写事务，也就是 begin 了还未 commit 或 rollback 的事务  参考文献： MySQL运行原理与基础架构</description>
    </item>
    
    <item>
      <title>mysql底层基本原理</title>
      <link>https://zcj-git520.github.io/p/mysql%E5%BA%95%E5%B1%82%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sun, 20 Feb 2022 22:00:38 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/mysql%E5%BA%95%E5%B1%82%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</guid>
      <description>索引  索引是帮助数据库获取有序数据的数据结构，实现快速检索  数据库索引的数据结构 哈希表(hash)  通过哈希函数，实现key-value的存储，同时可以使用开放地址法和拉链法解决哈希冲突，对查询单个值的 时间复杂度为O(1)，例如查找id=1：select * from user where id=1 ,但对范围查询十分的不友好,例如查找范围id&amp;gt;100的值：select * from user where id &amp;gt;100;  二叉树  二叉树的数据结构左小右大，可以通过中序遍历直接获取所有升序的数据，二叉树的查询的时间复杂度为 O(lgn),缺点是二叉树容易退化链表，增加数据的查找的时间。在最坏的情况下的时间复杂度为O(n)  平衡二叉树(AVL)和红黑树  通过左旋和右旋以及节点颜色的改变等方式调整树避免退化为链表，使二叉树保持平衡转态，保证树的查找性能 即时间复杂度在O(lgn)。但是二叉树不适合用做数据的底层数据结构原因如下：   1.数据库的查询的瓶颈在于对磁盘io的操作，当存储大量数据的情况下，要保证树的平衡的时候，树的高度 是在不断的增加，在对每一个节点的操作时，就是对磁盘io的操作，即对磁盘io的操作过于的频繁，增加了对数据库 查询等时间。 2 每个节点的分配的内存是16kb的数据量，对于二叉树的节点保持的数据是下于16KB,当数据过低时，也会造成内存的浪费
 B树  B树是一种平衡多分树，节点最多含有N颗子树(指针)，N-1个关键字(数据存储空间) (N&amp;gt;=2);除了根节点和叶子节点外，其它每个节点至少有M=N/2个子节点，M向上取整，即分裂的时候从中间分开，分成M棵子树； 若根节点不是叶子结点，则至少有两颗子树。B树解决了二叉树的高度问题，即减少了对磁盘io的操作，减少了数据库的时间,查询的时间复杂度为 h*O(lgn),h为树的高度。但是也存在一下问题   1.不太适合范围的查询，存在索引的失效 2.稳定性较弱，节点存储的数据较大，占用的内存空间较大
 B+树  B+树和B树类似,B+树的非叶子节点不会存储数据，只存储索引值(指针地址)，所有的数据都是存储在叶子节点，其目的是为了增加系统的稳定性。 应为节点存储的索引，叶子节点存储数据，叶子节点用了链表连接起来，这个链表本身就是有序的，在数据范围查找时，更具备效率 ，保证了存储空间的使用。高度不高，减少了对磁盘的io的操作，保证了查询的效率。  存储引擎 InnoDB引擎 引擎特点 1.将数据存储在表空间中，表空间由一系列的数据文件组成，由InnoDB管理；
2.支持每个表的数据和索引存放在单独文件中(innodb_file_per_table)；
3.支持事务，采用MVCC来控制并发，并实现标准的4个事务隔离级别，支持外键；
4.索引基于聚簇索引建立，对于主键查询有较高性能；
5.数据文件的平台无关性，支持数据在不同的架构平台移植；
6.能够通过一些工具支持真正的热备。如XtraBackup等；
7.内部进行自身优化如采取可预测性预读，能够自动在内存中创建hash索引等。
引擎实现  InnoDB是采用的是B+树作为索引的结构，其存储文件分别是.frm表的定义文件和.idb的数据文件。InnoDB是支持行锁和表锁的。InnoDB 支持事务，且支持四种隔离级别（读未提交、读已提交、可重复读、串行化），默认的为可重复读 表数据文件本身就是按B+Tree组织的一个索引结构，这棵树的叶节点data域保存了完整的数据记录。这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引。   MyISAM引擎 引擎特点 1.</description>
    </item>
    
  </channel>
</rss>
