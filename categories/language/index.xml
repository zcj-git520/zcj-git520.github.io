<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>语言学习 on Chengji Zhao&#39;s blog</title>
    <link>https://zcj-git520.github.io/categories/language/</link>
    <description>Recent content in 语言学习 on Chengji Zhao&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 15 Jul 2022 22:00:38 +0800</lastBuildDate><atom:link href="https://zcj-git520.github.io/categories/language/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>redis GO语言实践二</title>
      <link>https://zcj-git520.github.io/p/redis-go%E8%AF%AD%E8%A8%80%E5%AE%9E%E8%B7%B5%E4%BA%8C/</link>
      <pubDate>Fri, 15 Jul 2022 22:00:38 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/redis-go%E8%AF%AD%E8%A8%80%E5%AE%9E%E8%B7%B5%E4%BA%8C/</guid>
      <description>redis GO语言实践二 简单介绍  使用go 语言操作redis数据库 使用的库为：go get -u github.com/go-redis/redis 对redis数据库的map，集合和有序集合的操作  代码如下 /*操作hash Map数据类型*/ func (r *RedisInfo)OperaHashMap(){ //添加单个数据 	err := r.RedisDb.HSet(&amp;#34;hKey&amp;#34;,&amp;#34;filed0&amp;#34;, &amp;#34;value0&amp;#34;).Err() if err != nil { fmt.Println(&amp;#34;添加单个数据失败&amp;#34;, err) return } // 批量添加数据 	hData := make(map[string]interface{}) hData[&amp;#34;filed1&amp;#34;] = &amp;#34;value1&amp;#34; hData[&amp;#34;filed2&amp;#34;] = &amp;#34;value2&amp;#34; hData[&amp;#34;filed3&amp;#34;] = &amp;#34;value3&amp;#34; hData[&amp;#34;filed4&amp;#34;] = 20 hData[&amp;#34;filed5&amp;#34;] = 12.5 err = r.RedisDb.HMSet(&amp;#34;hKey&amp;#34;, hData).Err() if err != nil { fmt.Println(&amp;#34;批量添加数据失败&amp;#34;,err) return } // 单个获取数据 	value, err := r.</description>
    </item>
    
    <item>
      <title>redis GO语言实践一</title>
      <link>https://zcj-git520.github.io/p/redis-go%E8%AF%AD%E8%A8%80%E5%AE%9E%E8%B7%B5%E4%B8%80/</link>
      <pubDate>Fri, 08 Jul 2022 22:00:38 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/redis-go%E8%AF%AD%E8%A8%80%E5%AE%9E%E8%B7%B5%E4%B8%80/</guid>
      <description>redis GO语言实践一 简单介绍  使用go 语言操作redis数据库 使用的库为：go get -u github.com/go-redis/redis 对redis数据库的连接，对字符串和列表的操作  代码如下 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/go-redis/redis&amp;#34; &amp;#34;log&amp;#34; &amp;#34;time&amp;#34; ) const ( ADDR = &amp;#34;192.168.1.128:6379&amp;#34; PASSWORD = &amp;#34;&amp;#34; DB = 0 ) type RedisInfo struct { Option *redis.Options RedisDb *redis.Client } // 连接redis数据库 func (r *RedisInfo)ConnRedis() error{ redisDb := redis.NewClient(r.Option) // 判断是否成功连接数据库 	_, err := redisDb.Ping().Result() if err != nil { return err } r.RedisDb = redisDb return nil } /* 操作字符串类型 */ // 操作set/get func (r *RedisInfo)OperaStringSGet() { // 添加key/value 可设置过期时间 	err := r.</description>
    </item>
    
    <item>
      <title>Disk Test</title>
      <link>https://zcj-git520.github.io/p/disk-test/</link>
      <pubDate>Mon, 20 Jun 2022 22:00:38 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/disk-test/</guid>
      <description>diskText  直接跳过文件系统，对磁盘数据进行读写，判断磁盘测试数据读写校验数据是否丢失  磁盘信息 type DiskSizeInfo struct { DiskPath string // 磁盘名 	SrcMap map[string]string // 测试数据集(文件夹/校验数据) 	Size int // 磁盘分组大小 	SeekSize int	// 磁盘数据偏移 	BlockSize int // 读写磁盘数据的大小 } 使用两种方式跳过文件系统直接对磁盘进行读写  直接读写磁盘  // 磁盘的写入 func (d *DiskSizeInfo)DiskWriteByFile(src string) error // 读取磁盘 func (d *DiskSizeInfo)DiskReadByFile() ([]byte, error) ​	2.通过dd命令行对磁盘进行读者
// 通过dd命令写于磁盘 func (d *DiskSizeInfo)WriteDisk(staPos int, iFile string) error // 通过dd命令读取磁盘数据 func (d *DiskSizeInfo)ReadDisk(staPos int, oFile string) error 对磁盘已有数据进行校验 func (d *DiskSizeInfo)CheckReadDisk(src string, i int) 磁盘校验数据的类型的返回 func (d *DiskSizeInfo)DiskDatatype( i int) 循环通过数据集进行校验 func (d *DiskSizeInfo)Run() error 初始化校验集数据文件 func (d *DiskSizeInfo)initFile()error 磁盘的挂起或者卸载（针对与带文件系统）和磁盘清除 func (d *DiskSizeInfo)MountDisk(src string) error func (d *DiskSizeInfo)ClearDisk(src string) error 初始化校验集数据文件 func (d *DiskSizeInfo)initFile() 其他功能 文件通过md5校验比较 func FileCompare(src, dst string) (bool, error) 生成文件校验和函数 func fileCheckSum(fileName string) (string, error) //PathExists 判断一个文件或文件夹是否存在 //输入文件路径，根据返回的bool值来判断文件或文件夹是否存在 func PathExists(path string) (bool,error) 校验文件中是否存在校验值 func CheckFileData(data []byte, check string) bool 源码  我的github:https://github.</description>
    </item>
    
    <item>
      <title>数据结构-AVL tree go实现</title>
      <link>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-avl-tree-go%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Tue, 15 Feb 2022 21:00:08 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-avl-tree-go%E5%AE%9E%E7%8E%B0/</guid>
      <description>平衡二叉树 数据结构定义 // 定义树的节点type AVLTreeNode struct {info int // 定义存储的内容height int // 树的高度right *AVLTreeNode // 右节点left *AVLTreeNode // 左节点}// 定义树type AVLTree struct {root *AVLTreeNode // 定义根节点}// 创建节点func creatNode(data int) *AVLTreeNode{return &amp;amp;AVLTreeNode{info: data,height: -1,right: nil,left: nil,}}数据操作  增删改查  数据的插入 // 数据的插入func getHeight(node *AVLTreeNode) int {if node == nil{return -1}return node.</description>
    </item>
    
    <item>
      <title>数据结构-AVL tree c&#43;&#43;实现</title>
      <link>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-avl-tree-c-%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 10 Jan 2022 21:00:08 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-avl-tree-c-%E5%AE%9E%E7%8E%B0/</guid>
      <description>平衡二叉树 数据结构定义 // 定义树的节点template&amp;lt;class T&amp;gt;class AvrTreeNode{public:AvrTreeNode(){};AvrTreeNode(T data){this-&amp;gt;data = data;left = 0;right = 0;hight = -1;}~AvrTreeNode(){};T data; // 存储的数据AvrTreeNode *left; // 左子树AvrTreeNode *right; // 右子树int hight; // 高度 };// 定义树template&amp;lt;class T&amp;gt;class AvrTree{private:AvrTreeNode&amp;lt;T&amp;gt; *root; // 定义根节点// 插入节点void inseartNode(AvrTreeNode&amp;lt;T&amp;gt;*&amp;amp; node, const T data);void deleteNodeAll(AvrTreeNode&amp;lt;T&amp;gt; *node); // 删除所有节点// 显示节点void DLR(AvrTreeNode&amp;lt;T&amp;gt; *node);void LDR(AvrTreeNode&amp;lt;T&amp;gt; *node);void LRD(AvrTreeNode&amp;lt;T&amp;gt; *node);// 删除*&amp;amp;代表指针引用bool deleteNode(AvrTreeNode&amp;lt;T&amp;gt;*&amp;amp; node, const T data);// void deleteNodeByMerge(AvrTreeNode&amp;lt;T&amp;gt;*&amp;amp; node); // 合并删除// void deleteNodeByCopy(AvrTreeNode&amp;lt;T&amp;gt;*&amp;amp; node); // 复制删除// 单右旋void LL(AvrTreeNode&amp;lt;T&amp;gt; *&amp;amp;node);// 单左旋void RR(AvrTreeNode&amp;lt;T&amp;gt; *&amp;amp;node);// 左右旋void RLR(AvrTreeNode&amp;lt;T&amp;gt; *&amp;amp;node);// 右左旋void LRR(AvrTreeNode&amp;lt;T&amp;gt; *&amp;amp;node);// 求高度的最大值int maxHight(int h1, int h2){return h1&amp;gt;h2 ?</description>
    </item>
    
    <item>
      <title>数据结构-Binary search tree go实现</title>
      <link>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-binary-search-tree-go%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 05 Jan 2022 21:00:08 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-binary-search-tree-go%E5%AE%9E%E7%8E%B0/</guid>
      <description>二叉查找树 数据结构定义 // 定义树的节点type binarySearchTreeNode struct {info int // 定义存储的内容left *binarySearchTreeNode // 左节点right *binarySearchTreeNode // 右节点}// 定义树type BinarySearchTree struct {root *binarySearchTreeNode // 定义根节点numNodes int // 节点树}// 创建节点func creatNode(data int) *binarySearchTreeNode{return &amp;amp;binarySearchTreeNode{info: data,left: nil,right: nil,}}// 节点的数量func (b *BinarySearchTree)GetNodeNum()int{return b.numNodes}数据操作  增删改查  数据的插入 // 节点的插入func (b *BinarySearchTree) InsertNode(data int) {newNode := creatNode(data)// 如果为空树if b.</description>
    </item>
    
    <item>
      <title>数据结构-Binary search tree c&#43;&#43;实现</title>
      <link>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-binary-search-tree-c-%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sat, 01 Jan 2022 21:00:08 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-binary-search-tree-c-%E5%AE%9E%E7%8E%B0/</guid>
      <description>二叉查找树 数据结构定义 // 节点的定义template&amp;lt;class T&amp;gt;class BinarySearchTreeNode{public:BinarySearchTreeNode(){left = 0;right = 0;}BinarySearchTreeNode(T data){this-&amp;gt;data = data;left = 0;right = 0;}~BinarySearchTreeNode(){};T data; // 保存的节点的数据BinarySearchTreeNode *left; // 指向左节点BinarySearchTreeNode *right; // 指向右节点};// 树的定义template&amp;lt;class T&amp;gt;class BinarySearchTree{private:BinarySearchTreeNode&amp;lt;T&amp;gt; *root; // 定义头节点int treeNodeNum; // 树的节点数void deleteNodeAll(BinarySearchTreeNode&amp;lt;T&amp;gt; *node); // 删除所有节点// 显示节点void DLR(BinarySearchTreeNode&amp;lt;T&amp;gt; *node);void LDR(BinarySearchTreeNode&amp;lt;T&amp;gt; *node);void LRD(BinarySearchTreeNode&amp;lt;T&amp;gt; *node);// 删除*&amp;amp;代表指针引用void deleteNodeByMerge(BinarySearchTreeNode&amp;lt;T&amp;gt;*&amp;amp; node); // 合并删除void deleteNodeByCopy(BinarySearchTreeNode&amp;lt;T&amp;gt;*&amp;amp; node); // 复制删除public:BinarySearchTree(){root = 0;treeNodeNum = 0;};~BinarySearchTree();// 清空树void clear();// 节点的个数int Nodes(){return treeNodeNum;}// 是否为空树bool isEmpty(){return root == 0;}// 插入数据void inseartNode(const T data);// 深度优先遍历树// 前序遍历(DLR 根-&amp;gt;左-&amp;gt;右)void showNodeByDLR();// 中序遍历(LDR 左-&amp;gt;根-&amp;gt;右)void showNodeByLDR();// 后序遍历(LRD 左-&amp;gt;右-&amp;gt;根)void showNodeByLRD();// 删除节点的数据// 合并删除bool removeNodeMerge(const T data);// 复制删除bool removeNodeCopy(const T data);// 查找数据bool SearchData(const T data);};数据操作  增删改查  数据的插入 template&amp;lt;class T&amp;gt;void BinarySearchTree&amp;lt;T&amp;gt; ::inseartNode(const T data){BinarySearchTreeNode&amp;lt;T&amp;gt; *new_node = new BinarySearchTreeNode&amp;lt;T&amp;gt;(data);// 如果为空树if(isEmpty()){root = new_node; // 新建节点设置为root 节点treeNodeNum ++; // 树的节点数+1return;}BinarySearchTreeNode&amp;lt;T&amp;gt; *node = root;// 遍历树， 找到插入的节点的位置while (node !</description>
    </item>
    
    <item>
      <title>数据结构-栈(基于单项链表)&amp;&amp;队列(基于双向链表)go实现</title>
      <link>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88%E5%9F%BA%E4%BA%8E%E5%8D%95%E9%A1%B9%E9%93%BE%E8%A1%A8%E9%98%9F%E5%88%97%E5%9F%BA%E4%BA%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8go%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 31 Dec 2021 22:00:08 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88%E5%9F%BA%E4%BA%8E%E5%8D%95%E9%A1%B9%E9%93%BE%E8%A1%A8%E9%98%9F%E5%88%97%E5%9F%BA%E4%BA%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8go%E5%AE%9E%E7%8E%B0/</guid>
      <description>栈 基于单向链表实现
数据结构定义 type stackData struct {list *Singly_linked_list.LinkedList}// 获得栈的长度func (s *stackData)Len() int{return s.list.Len()}数据操作 // 将数据插入栈顶func (s *stackData)Push(data interface{}) {s.list.AddToHead(data)}// 将数据从栈顶取出，并删除数据func (s *stackData)Pop()interface{}{data := s.list.QuireIndex(0)// 栈不为空, 删除栈顶数据if data != nil{s.list.DeleteToHead()}return data}// 将数据取出，不删除数据func (s *stackData)GetTopValue()interface{}{return s.list.QuireIndex(0)}// 展示栈func (s *stackData)ShowStack() {s.list.QuireAll()}创建栈 func NewStackData()*stackData{return &amp;amp;stackData{list:Singly_linked_list.NewLinkedList()}}队列  基于双向链表实现  数据结构定义 type queueData struct {list *double_linked_list.</description>
    </item>
    
    <item>
      <title>数据结构-栈(基于单项链表)&amp;&amp;队列(基于双向链表)c&#43;&#43;实现</title>
      <link>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88%E5%9F%BA%E4%BA%8E%E5%8D%95%E9%A1%B9%E9%93%BE%E8%A1%A8%E9%98%9F%E5%88%97%E5%9F%BA%E4%BA%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8c-%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 31 Dec 2021 21:00:08 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88%E5%9F%BA%E4%BA%8E%E5%8D%95%E9%A1%B9%E9%93%BE%E8%A1%A8%E9%98%9F%E5%88%97%E5%9F%BA%E4%BA%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8c-%E5%AE%9E%E7%8E%B0/</guid>
      <description>栈 基于单向链表实现
数据结构定义 template&amp;lt;class T&amp;gt;class Stack{private:SinglyList&amp;lt;T&amp;gt; list; // 存储数据的链表public:Stack(/* args */){};~Stack();// 获得栈的长度int len(){return list.getlen();}// 清空栈void clear();// 判断栈是否为空sbool isEmpty();// 将数据放入栈顶void push(T data);// 获取栈顶数据，并删除数据bool pop(T *info);// 获取栈顶数据但不删除数据bool getTopValue(T *info);// 显示所有栈的数据void showStack();};数据操作 template&amp;lt;class T&amp;gt;void Stack&amp;lt;T&amp;gt; ::clear(){list.clear();}template&amp;lt;class T&amp;gt;void Stack&amp;lt;T&amp;gt; ::push(T data){list.</description>
    </item>
    
    <item>
      <title>数据结构-双向链表&amp;&amp;循环双向链表go语言实现</title>
      <link>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E5%BE%AA%E7%8E%AF%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 30 Dec 2021 22:00:08 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E5%BE%AA%E7%8E%AF%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</guid>
      <description>双向链表 数据结构的定义 // 双向链表的节点定义type doubleLinkedNode struct {info interface{} // 存储的数据prev *doubleLinkedNode // 指向先驱节点next *doubleLinkedNode // 指向后驱几点}// 双向链表定义type DoubleList struct {Head *doubleLinkedNode // 头节点Tail *doubleLinkedNode // 尾节点len int // 链表长度}创建节点 func createNode(data interface{}) *doubleLinkedNode {return &amp;amp;doubleLinkedNode{info: data,prev: nil,next: nil,}}链表的长度 // 链表的长度func(d *DoubleList)Len() int{return d.len}数据的插入 单个节点的插入 // 链表的尾插法func (d *DoubleList)AddToTail(info interface{}) *DoubleList {newNode := createNode(info) // 创建新节点// 链表为空, 头尾节点都指向该节点if d.</description>
    </item>
    
    <item>
      <title>数据结构-双向链表&amp;&amp;循环双向链表 c&#43;&#43;实现</title>
      <link>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E5%BE%AA%E7%8E%AF%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8-c-%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 30 Dec 2021 21:00:08 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E5%BE%AA%E7%8E%AF%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8-c-%E5%AE%9E%E7%8E%B0/</guid>
      <description>双向链表 数据结构的定义 template&amp;lt;class T&amp;gt;class TwoWayLinkedNode{public:TwoWayLinkedNode(/* args */){}; TwoWayLinkedNode(T data){this-&amp;gt;data = data;this-&amp;gt;prev = 0;this-&amp;gt;next = 0;}~TwoWayLinkedNode(){};T data; // 数据TwoWayLinkedNode *next; // 指向后继节点TwoWayLinkedNode *prev; // 指向前驱};template&amp;lt;class T&amp;gt;class TwoWayList{private:/* data */TwoWayLinkedNode&amp;lt;T&amp;gt; *head; // 头节点TwoWayLinkedNode&amp;lt;T&amp;gt; *tail; // 尾节点int len; // 链表长度public:TwoWayList(){head = 0;tail = 0;len = 0;};~TwoWayList();// 链表的长度+1void setlen(int len){this-&amp;gt;len += len;}; // 返回链表的长度int getlen(){return len;};// 清空链表void clear();// 链表是否为空bool isEmpty(){return head == 0;}// 插入到链表的头部void inseartToHead(T data); // 插入到链表的尾部void inseartTotail(T data); // 插入到链表的indexvoid inseartToindex(int index, T data); // 删除链表的头部元素void deleteToHead();// 删除链表的尾部元素void deleteToTail();// 删除链表的index元素void deleteToIndex(int index);// 查询链表的所有值void queryAll();// 返回index的值bool queryIndex(int index, T *data);// 判断value是否存在bool queryValue(T data);};数据的操作 template&amp;lt;class T&amp;gt;void TwoWayList&amp;lt;T&amp;gt; ::inseartToHead(T data){TwoWayLinkedNode&amp;lt;T&amp;gt; *new_Node = new TwoWayLinkedNode&amp;lt;T&amp;gt;(data); // 链表为空if (isEmpty()){head = tail = new_Node;}else{new_Node-&amp;gt;next = head; // 新节点的后驱指向头节点head-&amp;gt;prev = new_Node; // 头节点的前驱指向新节点head = new_Node; // 将新节点设置新的头节点}setlen(addOne);}template&amp;lt;class T&amp;gt;void TwoWayList&amp;lt;T&amp;gt; ::inseartTotail(T data){TwoWayLinkedNode&amp;lt;T&amp;gt; *new_Node = new TwoWayLinkedNode&amp;lt;T&amp;gt;(data);if(isEmpty()){head = tail = new_Node;}else{tail-&amp;gt;next = new_Node; // 尾节点的next指向新节点new_Node-&amp;gt;prev = tail; // 新节点的前驱指向尾节点tail = new_Node; // 将新节点设置为新的尾节点}setlen(addOne);}template&amp;lt;class T&amp;gt;void TwoWayList&amp;lt;T&amp;gt; ::inseartToindex(int index, T data){int len = getlen();if(index == 0){inseartToHead(data);return;}// 链表为空，当index 小于0 或者大于等于链表数，采用尾插法if (isEmpty() || index &amp;lt; 0 || index &amp;gt;= len){inseartTotail(data);return;}TwoWayLinkedNode&amp;lt;T&amp;gt; *node = head;int __index = 1;while (__index !</description>
    </item>
    
    <item>
      <title>数据结构-单向链表c&#43;&#43;语言实现</title>
      <link>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8c-%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 27 Dec 2021 22:00:08 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8c-%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</guid>
      <description>单向链表 数据结构的定义 数据节点的类的定义 class SinglyLinkedNode{public:SinglyLinkedNode(){next = 0;};// 创建新的nodeSinglyLinkedNode(int data){this-&amp;gt;data = data;next = 0;};~SinglyLinkedNode(){};int data; // 链表的数据SinglyLinkedNode *next; // 指向下一个节点};链表的数据结构(类的定义) class SinglyList{private:/* data */SinglyLinkedNode *head; // 头节点SinglyLinkedNode *tail; // 尾节点int len; // 链表长度public:SinglyList(){head = 0;tail = 0;len = 0;};~SinglyList();// 链表的长度+1void setlen(int len){this-&amp;gt;len += len;}; // 返回链表的长度int getlen(){return len;};// 链表是否为空bool ismpty(){return head == 0;}// 插入到链表的头部void inseartToHead(int data); // 插入到链表的尾部void inseartTotail(int data); // 插入到链表的indexvoid inseartToindex(int index, int data); // 删除链表的头部元素void deleteToHead();// 删除链表的尾部元素void deleteToTail();// 删除链表的index元素void deleteToIndex(int index);// 查询链表的所有值void queryAll();// 返回index的值int queryIndex(int index);// 判断value是否存在bool queryValue(int data);};数据的插入 插入到链表的尾部 void SinglyList::inseartTotail(int data){// 定义nodeSinglyLinkedNode *new_node;new_node = new SinglyLinkedNode(data);// 链表为空if (ismpty()){head = tail = new_node; // 头尾节点都指向新创节点setlen(addOne); // 节点数+1return;}tail-&amp;gt;next = new_node;tail = tail-&amp;gt;next;setlen(addOne);}插入到链表的头部 void SinglyList::inseartToHead(int data){SinglyLinkedNode *node;node = new SinglyLinkedNode(data);if (ismpty()){head = tail = node;setlen(addOne);return ;}node-&amp;gt;next = head;head = node;setlen(addOne);}插入到链表的index void SinglyList::inseartToindex(int index, int data){int len;len = getlen()-1;// 如果链表为空, 或者插入到末尾,或者index &amp;lt;0 采用尾插法添加到链表中if (ismpty() || index ==len || index &amp;lt; 0){inseartTotail(data);return;}if(index == 0){inseartToHead(data);return;}SinglyLinkedNode *node;node = new SinglyLinkedNode(data);int __index = 1;for (node = head; node !</description>
    </item>
    
    <item>
      <title>数据结构-单向链表go语言实现</title>
      <link>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sat, 25 Dec 2021 22:00:08 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</guid>
      <description>单向链表 数据结构的定义 单项链表节点的定义type singlyLinkedNode struct {info interface{} // 存储任意数据next *singlyLinkedNode // 指向下一节点}type linkedList struct {len int // 链表长度Head *singlyLinkedNode // 头节点Tail *singlyLinkedNode // 尾节点}创建节点 func createNode(info interface{}) *singlyLinkedNode {node := &amp;amp;singlyLinkedNode{info: info,next: nil,}return node}链表的长度 func(l *linkedList)Len() int{return l.len}数据的插入 单个节点的插入 // 链表的尾插法func (l *linkedList)AddToTail(info interface{}) *linkedList {newNode := createNode(info) // 创建新节点// 链表为空, 头尾节点都指向该节点if l.</description>
    </item>
    
    <item>
      <title>超时重试机制-host_try</title>
      <link>https://zcj-git520.github.io/p/%E8%B6%85%E6%97%B6%E9%87%8D%E8%AF%95%E6%9C%BA%E5%88%B6-host_try/</link>
      <pubDate>Mon, 20 Dec 2021 22:00:08 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/%E8%B6%85%E6%97%B6%E9%87%8D%E8%AF%95%E6%9C%BA%E5%88%B6-host_try/</guid>
      <description>host_try  host_try：主要是目的是在单个或者多个host的下，连接超时或者连接失败下的重试机制 host_try: 提供三种退避策略：1. 尝试等待时间指数增长 2. 以相同时间进行尝试 3.随机时间进行尝试 三种尝试策略可一起使用 host_try: 提供三种重试方式：1. 轮询host进行重连, 重连次数达到后,在将换下一host, 直到重新连接成功或所有的host都重连完成结束 2.每一个host进行重连, 在将换下一host, 所有的host失败了,在进行下一次重连。直到重新连接成功或重连次数达到后结束 3. 重试直到成功 host_try 只是提供重试连接的接口，具体请求的方法需要自己写  host_try的工作原理  存在多个host的请求提供相同的服务如(ntp)，存在连接超时的情况，需要不断的尝试连接， 只要一个host连接请求成功就返回  host_try的配置结构 type tryConfig struct {attemptNum uint // 尝试的重连的次数nowAttempt uint // 现在第几次重连hosts []string // 连接的host组successHost string // 连接成功的hosterrorHost map[string]string // 连接失败的host和错误原因attemptType string // 重连方式attemptStatus bool // 最终重连的状态delay time.Duration // 延时时间maxDelay time.Duration // 最大延时时间maxJitter time.</description>
    </item>
    
    <item>
      <title>timerTask 定时任务包</title>
      <link>https://zcj-git520.github.io/p/timertask-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%8C%85/</link>
      <pubDate>Wed, 15 Dec 2021 22:00:08 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/timertask-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%8C%85/</guid>
      <description>timerTask 定时任务：可以定时执行单个或者对个任务：
 定时定时任务 停止定时任务 重置定时时间，并执行定时任务 定时开启定时任务 定时结束定时任务  timerTask结构 type timerConfig struct {timing time.Duration // 定时时间startTiming time.Duration // 定时开启定时任务时间stopTiming time.Duration // 定时停止定时任务时间running bool // 定时器运行的状态,运作中为true/没有运行为falsetasks []func() // 定时任务stopChan chan struct{} // 停止定时器日任务runningMu sync.MutexWaiter sync.WaitGroup}定时任务的开始和结束 函数原型：NewTimerTask(d time.Duration, tasks []func(), opts ... Option) *timerConfig参数为：统一的定时任务时间,定时任务集, 可选参数【定时开启定时任务时间(SetTimerStart(d time.Duration)), 定时停止定时任务时间(SetTimerStop(d time.Duration))】Start()开始定时任务, Stop()结束定时任务 使用
t1 := 1 * time.Secondtasks := []func(){printTest1, printTest2, printTest3, printTest4, printTest5}timer := NewTimerTask(t1, tasks)timer.</description>
    </item>
    
    <item>
      <title>Python安全指南</title>
      <link>https://zcj-git520.github.io/p/python%E5%AE%89%E5%85%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sat, 30 Oct 2021 22:00:08 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/python%E5%AE%89%E5%85%A8%E6%8C%87%E5%8D%97/</guid>
      <description>文章来源 鹅厂(腾讯)代码安全指南
通用 加密算法 【必须】避免使用不安全的对称加密算法  DES和3DES已经不再适用于现代应用程序，应改为使用AES。  程序日志 【建议】对每个重要行为都记录日志  确保重要行为都记录日志，且可靠保存6个月以上。  1.2.2 【建议】禁止将未经验证的用户输入直接记录日志  当日志条目包含未经净化的用户输入时会引发记录注入漏洞。恶意用户会插入伪造的日志数据，从而让系统管理员以为是系统行为。  1.2.3 【建议】避免在日志中保存敏感信息  不能在日志保存密码（包括明文密码和密文密码）、密钥和其它敏感信息  系统口令 【必须】禁止使用空口令、弱口令、已泄露口令 【必须】口令强度要求  口令强度须同时满足：
 密码长度大于14位 必须包含下列元素：大小写英文字母、数字、特殊字符 不得使用各系统、程序的默认初始密码 不能与最近6次使用过的密码重复 不得与其他外部系统使用相同的密码   【必须】口令存储安全  禁止明文存储口令 禁止使用弱密码学算法（如DES和3DES）加密存储口令 使用不可逆算法和随机salt对口令进行加密存储  【必须】禁止传递明文口令 【必须】禁止在不安全的信道中传输口令 配置&amp;amp;环境 Python版本选择 【建议】使用Python 3.6+的版本  新增的项目应使用 Python 3.6+   为什么要这么做？ 由于 Python 2 在 2020 年停止维护，相关组件的漏洞不能得到及时修复与维护
 第三方包安全 【必须】禁止使用不安全的组件 配置信息 【必须】密钥存储安全  在使用对称密码算法时，需要保护好加密密钥。当算法涉及敏感、业务数据时，可通过非对称算法协商加密密钥。其他较为不敏感的数据加密，可以通过变换算法等方式保护密钥。  【必须】禁止硬编码敏感配置  禁止在源码中硬编码AK/SK、IP、数据库账密等配置信息 应使用配置系统或KMS密钥管理系统。  后台 输入验证 【必须】按类型进行数据校验   所有程序外部输入的参数值，应进行数据校验。校验内容包括但不限于：数据长度、数据范围、数据类型与格式。校验不通过，应拒绝。</description>
    </item>
    
    <item>
      <title>c/c&#43;&#43;安全指南</title>
      <link>https://zcj-git520.github.io/p/c/c-%E5%AE%89%E5%85%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Thu, 28 Oct 2021 22:00:08 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/c/c-%E5%AE%89%E5%85%A8%E6%8C%87%E5%8D%97/</guid>
      <description>文章来源 鹅厂(腾讯)代码安全指南
通用安全指南 C/C++使用错误 【必须】不得直接使用无长度限制的字符拷贝函数 不应直接使用legacy的字符串拷贝、输入函数，如strcpy、strcat、sprintf、wcscpy、mbscpy等，这些函数的特征是：可以输出一长串字符串，而不限制长度。如果环境允许，应当使用其_s安全版本替代，或者使用n版本函数（如：snprintf，vsnprintf）。
若使用形如sscanf之类的函数时，在处理字符串输入时应当通过%10s这样的方式来严格限制字符串长度，同时确保字符串末尾有\0。如果环境允许，应当使用_s安全版本。
但是注意，虽然MSVC 2015时默认引入结尾为0版本的snprintf（行为等同于C99定义的snprintf）。但更早期的版本中，MSVC的snprintf可能是_snprintf的宏。而_snprintf是不保证\0结尾的（见本节后半部分）。
（MSVC） Beginning with the UCRT in Visual Studio 2015 and Windows 10, snprintf is no longer identical to _snprintf. The snprintf function behavior is now C99 standard compliant. 从Visual Studio 2015和Windows 10中的UCRT开始，snprintf不再与_snprintf相同。snprintf函数行为现在符合C99标准。 请参考：https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l?redirectedfrom=MSDN&amp;amp;view=vs-2019 因此，在使用n系列拷贝函数时，要确保正确计算缓冲区长度，同时，如果你不确定是否代码在各个编译器下都能确保末尾有0时，建议可以适当增加1字节输入缓冲区，并将其置为\0，以保证输出的字符串结尾一定有\0。
// Good char buf[101] = {0}; snprintf(buf, sizeof(buf) - 1, &amp;#34;foobar ...&amp;#34;, ...); 一些需要注意的函数，例如strncpy和_snprintf是不安全的。 strncpy不应当被视为strcpy的n系列函数，它只是恰巧与其他n系列函数名字很像而已。strncpy在复制时，如果复制的长度超过n，不会在结尾补\0。
同样，MSVC _snprintf系列函数在超过或等于n时也不会以0结尾。如果后续使用非0结尾的字符串，可能泄露相邻的内容或者导致程序崩溃。
// Bad char a[4] = {0}; _snprintf(a, 4, &amp;#34;%s&amp;#34;, &amp;#34;AAAA&amp;#34;); foo = strlen(a); 上述代码在MSVC中执行后， a[4] == &amp;lsquo;A&amp;rsquo;，因此字符串未以0结尾。a的内容是&amp;quot;AAAA&amp;quot;，调用strlen(a)则会越界访问。因此，正确的操作举例如下：</description>
    </item>
    
    <item>
      <title>Go安全指南</title>
      <link>https://zcj-git520.github.io/p/go%E5%AE%89%E5%85%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sun, 24 Oct 2021 22:00:08 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/go%E5%AE%89%E5%85%A8%E6%8C%87%E5%8D%97/</guid>
      <description>文章来源 鹅厂(腾讯)代码安全指南
通用 内存管理 【必须】切片长度校验  在对slice进行操作时，必须判断长度是否合法，防止程序panic  // bad: 未判断data的长度，可导致 index out of range func decode(data []byte) bool { if data[0] == &#39;F&#39; &amp;amp;&amp;amp; data[1] == &#39;U&#39; &amp;amp;&amp;amp; data[2] == &#39;Z&#39; &amp;amp;&amp;amp; data[3] == &#39;Z&#39; &amp;amp;&amp;amp; data[4] == &#39;E&#39; &amp;amp;&amp;amp; data[5] == &#39;R&#39; { fmt.Println(&amp;quot;Bad&amp;quot;) return true } return false } // bad: slice bounds out of range func foo() { var slice = []int{0, 1, 2, 3, 4, 5, 6} fmt.</description>
    </item>
    
    <item>
      <title>Uber go 语言编码规范</title>
      <link>https://zcj-git520.github.io/p/uber-go-%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</link>
      <pubDate>Wed, 20 Oct 2021 22:00:08 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/uber-go-%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</guid>
      <description>uber-go/guide 的中文翻译 English Uber go 语言编码规范 Uber 是一家美国硅谷的科技公司，也是 go 语言的早期 adopter。其开源了很多 golang 项目，诸如被 gopher 圈熟知的 zap、jaeger 等。2018 年年末 Uber 将内部的 go 风格规范 开源到 GitHub，经过一年的积累和更新，该规范已经初具规模，并受到广大 gopher 的关注。本文是该规范的中文版本。本版本会根据原版实时更新。
目录  uber- go/guide 的中文翻译 English Uber go 语言编码规范 版本 目录 介绍 指导原则  指向 interface 的指针 Interface 合理性验证 接收器 (receiver) 与接口 零值 Mutex 是有效的 在边界处拷贝 Slices 和 Maps  接收 Slices 和 Maps 返回 slices 或 maps   使用 defer 释放资源 Channel 的 size 要么是 1，要么是无缓冲的 枚举从 1 开始 使用 time 处理时间  使用 time.</description>
    </item>
    
    <item>
      <title>Go Channel的深入理解</title>
      <link>https://zcj-git520.github.io/p/go-channel%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</link>
      <pubDate>Fri, 15 Oct 2021 22:00:38 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/go-channel%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</guid>
      <description>go Channel  （Do not communicate by sharing memory; instead, share memory by communicating）  CSP并发模型  CSP 即通信顺序进程、交谈循序程序，又被译为交换消息的循序程序(communicating sequential processes)，它是一种用来描述并发性系统之间进行交互的模型。 go Channe是一种特殊的类型，是有特定类型的队列。是链接goroutine(协程)的通信机制，通过通信共享内存而不是通过共享内存而实现通信. Channel 收发操作均遵循了先进先出的设计，具体规则如下：  先从 Channel 读取数据的 Goroutine 会先接收到数据； 先向 Channel 发送数据的 Goroutine 会得到先发送数据的权利；    
channel 数据结构定义： type hchan struct { // 队列中存储的数量 qcount uint // total data in the queue //环形队列的大小(最大存储数量 ) dataqsiz uint // size of the circular queue // 存放环形队列的数据，数组 buf unsafe.</description>
    </item>
    
    <item>
      <title>go goroutine与gmp模型的深入理解</title>
      <link>https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</link>
      <pubDate>Wed, 06 Oct 2021 22:00:38 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</guid>
      <description>go 协程goroutine  协程是用户级的线程，有用户自己调度，使用协程使得程序调度更加灵活。同时比线程更轻量，占用的栈内存更少。go语言天生支持高并发，go使用协程goroutine的调度器。goroutine 的栈内存最小值为2kb(_StackMin = 2048),它不是固定不变的，可以随需求增大和缩小。goroutine 维护着很大的内存，无需频繁开辟内存，goroutine是使用M:n模型，在用户态切换协程，加上创建协程代价低，使得cpu的利用率大大提升，cup的性能大幅度的被利用。  goroutine 调度器GPM模型 G  G 就是goroutine协程  type g struct { // Stack parameters. // stack describes the actual stack memory: [stack.lo, stack.hi). // stackguard0 is the stack pointer compared in the Go stack growth prologue. // It is stack.lo+StackGuard normally, but can be StackPreempt to trigger a preemption. // stackguard1 is the stack pointer compared in the C stack growth prologue.</description>
    </item>
    
    <item>
      <title>go map的深入理解</title>
      <link>https://zcj-git520.github.io/p/go-map%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</link>
      <pubDate>Mon, 20 Sep 2021 22:00:38 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/go-map%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</guid>
      <description>goland 基础之map map的内部结构  go map是使用的哈希表构建的 map的结构可分为：hmap的结构体和bmap(桶)，hmap结构体记录这map的基础信息(包括map存储个数， 桶的个数，hash种子，桶的数据，扩容时旧桶的数据以及迁移个数（map扩容不是一次性迁移完）) 源码如下    定义hmap的结构： type hmap struct { // Note: the format of the hmap is also encoded in cmd/compile/internal/gc/reflect.go. // Make sure this stays in sync with the compiler&#39;s definition. // map 存储元素的计数 count int // # live cells == size of map. Must be first (used by len() builtin) flags uint8 // map的状态标识，桶是否在增改，扩容或者缩容 //桶的个数/采用的与运算法计算桶的个数，桶的个数为2的整数次幂 B uint8 // log_2 of # of buckets (can hold up to loadFactor * 2^B items) //溢出的桶的数量的近似值 noverflow uint16 // approximate number of overflow buckets; see incrnoverflow for details hash0 uint32 // hash seed //指向桶数据的指针 buckets unsafe.</description>
    </item>
    
    <item>
      <title>go 切片的深入理解</title>
      <link>https://zcj-git520.github.io/p/go-%E5%88%87%E7%89%87%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</link>
      <pubDate>Wed, 15 Sep 2021 22:00:38 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/go-%E5%88%87%E7%89%87%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</guid>
      <description>切片的内部结构  切片的结构可分为：数组，数据（元素）的地址&amp;amp;data、也存元素个数len、可以存储多少元素cap 源码如下    定义切片的结构： type slice struct { array unsafe.Pointer len int cap int }  如图所示  avatar
 var data [] int 声明一个切片，相当于生成切片的结构，data地址指针为nil, len和cap都为0。这就很清楚为什么，nil切片不可以直接使用了😄 结构如图  avatar
 使用切片时需要make([]type,len,cap)或者初始化[]type{}才能使用，这是因为在在生成切片的结构时，同时也开辟了一段新的内存，类型为type, 结构长度为cap,同时值进行初始化。 make 源码如下：    func makeslice(et *_type, len, cap int) unsafe.Pointer { mem, overflow := math.MulUintptr(et.size, uintptr(cap)) // 判断是否越界 if overflow || mem &amp;gt; maxAlloc || len &amp;lt; 0 || len &amp;gt; cap { // NOTE: Produce a &#39;len out of range&#39; error instead of a // &#39;cap out of range&#39; error when someone does make([]T, bignumber).</description>
    </item>
    
  </channel>
</rss>
