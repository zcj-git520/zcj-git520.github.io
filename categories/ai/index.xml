<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AI on Chengji Zhao&#39;s blog</title>
    <link>https://zcj-git520.github.io/categories/ai/</link>
    <description>Recent content in AI on Chengji Zhao&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 25 Feb 2025 22:00:38 +0800</lastBuildDate><atom:link href="https://zcj-git520.github.io/categories/ai/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>多模态技术指南：原理与应用实践</title>
      <link>https://zcj-git520.github.io/p/%E5%A4%9A%E6%A8%A1%E6%80%81%E6%8A%80%E6%9C%AF%E6%8C%87%E5%8D%97%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 25 Feb 2025 22:00:38 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/%E5%A4%9A%E6%A8%A1%E6%80%81%E6%8A%80%E6%9C%AF%E6%8C%87%E5%8D%97%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5/</guid>
      <description>多模态技术指南：原理与应用实践 1. 多模态技术概述 多模态技术是指系统能够处理和整合多种形式数据（如文本、音频、图像、视频等）的能力。这项技术正在重塑人机交互方式，使AI系统能够像人类一样理解复杂的世界。
核心组件支持  聊天模型：处理多模态输入/输出 嵌入模型：多模态数据向量化表示 向量存储：跨模态数据检索  2. 聊天模型中的多模态实现 2.1 基础配置要求  支持多模态的聊天模型（如GPT-4 Vision、Gemini等） 消息内容块(content blocks)构造能力 供应商特定的API接入权限  2.2 输入处理实践 通过URL传递图像 from langchain_core.messages import HumanMessage message = HumanMessage( content=json.dumps([ {&amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;text&amp;#34;: prompt_txt}, {&amp;#34;type&amp;#34;: type, &amp;#34;data&amp;#34;: image_data, &amp;#34;source_type&amp;#34;: &amp;#34;base64&amp;#34;}, ]) ) 代码示例 # 多模态输入 import base64 import json from langchain_core.messages import HumanMessage from common.modeCommon import Model from config.config import Config from utils import images_util class Multimodal(object): def __init__(self, model: Model): self.</description>
    </item>
    
    <item>
      <title>LangServe</title>
      <link>https://zcj-git520.github.io/p/langserve/</link>
      <pubDate>Sat, 25 Jan 2025 22:00:38 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/langserve/</guid>
      <description>LangServe 实践 核心功能 LangServe 是一个专为 LangChain 设计的部署工具，可将 LangChain 可运行对象和链快速转化为 REST API，主要特点包括：
 自动化 API 生成
通过 FastAPI + Pydantic 自动推断输入/输出模型，生成带数据验证的 REST 端点 多协议支持
提供 /invoke（单次调用）、/batch（批量处理）、/stream（实时流）等标准化端点 调试友好  /stream_log 实时流式传输中间步骤 0.0.40+ 版本新增 /stream_events 简化流式处理   生产级架构
基于 uvloop 和 asyncio 实现高并发，支持 Swagger 自动文档  技术优势    特性 说明     声明式验证 通过 Pydantic 模型自动生成 JSON Schema，提供类型检查和清晰错误提示   无缝集成 内置 LangChain.js 客户端，支持 Python/JavaScript 调用   零模板代码 自动生成 API 文档和 Playground 调试界面    典型工作流 定义 LangChain 对象</description>
    </item>
    
    <item>
      <title>LCEL与LangChain流式处理指南</title>
      <link>https://zcj-git520.github.io/p/lcel%E4%B8%8Elangchain%E6%B5%81%E5%BC%8F%E5%A4%84%E7%90%86%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sat, 25 Jan 2025 22:00:38 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/lcel%E4%B8%8Elangchain%E6%B5%81%E5%BC%8F%E5%A4%84%E7%90%86%E6%8C%87%E5%8D%97/</guid>
      <description>LCEL与LangChain流式处理指南 什么是LCEL？ LCEL（LangChain Expression Language）是一种强大的工作流编排工具，能够从基本组件构建复杂任务链条(chain)，并具有以下生产级特性：
 🚀 一流的流式支持：直接从LLM流式传输标记到输出解析器 ⚡ 异步支持：同一代码可同步/异步运行，适合原型到生产 🔀 优化的并行执行：自动并行可并行步骤 🔄 重试和回退：配置可靠性机制 🔍 中间结果访问：实时监控和调试 📐 输入输出模式：自动生成Pydantic/JSONSchema验证  Runnable接口标准 LangChain组件通过Runnable协议实现标准化调用：
同步方法  stream(): 流式返回响应块 invoke(): 调用链处理输入 batch(): 批量处理输入列表  异步方法  astream(): 异步流式响应 ainvoke(): 异步调用 abatch(): 异步批量处理 astream_log(): 流式中间步骤+最终结果 astream_events(): 流式链事件(Beta)  组件I/O类型    组件 输入类型 输出类型     提示 字典 提示值   聊天模型 字符串/消息列表/提示值 聊天消息   LLM 字符串/消息列表/提示值 字符串   输出解析器 LLM/聊天模型输出 解析器特定   检索器 字符串 文档列表   工具 字符串/字典 工具特定    流式处理(Stream) 核心方法  同步流式：stream() 异步流式：astream()  关键特性  实时返回每个处理块 要求所有步骤支持流式处理 复杂度范围：  简单：LLM令牌流 复杂：部分JSON结果流    最佳实践 建议从LLM组件开始逐步构建流式处理链。</description>
    </item>
    
    <item>
      <title>LangChain 框架解析</title>
      <link>https://zcj-git520.github.io/p/langchain-%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Sat, 18 Jan 2025 22:00:38 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/langchain-%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90/</guid>
      <description>LangChain 框架解析 一、简介  定义：开源Python AI应用开发框架 核心价值：降低基于LLM的AI应用开发门槛 核心功能：  LLM集成（文本生成/问答/翻译/对话） 创意应用构建 标准化AI工作流    二、核心特性    特性 功能描述 应用场景     LLM &amp;amp; 提示管理 统一API抽象层 + 提示模板 标准化模型调用   链(Chain) 预封装任务工作流 问答系统/SQL生成   LCEL 表达式语言编排任务流 自定义AI流程   RAG 外部数据增强生成 知识库问答   Agents LLM决策+外部系统调用 自动化任务执行   模型记忆 对话历史记忆 多轮对话系统    LangChain 特性：
● LLM 和提示（Prompt）：LangChain 对所有 LLM 大模型进行了 API 抽象，统一了大模型访问 API，同时提供了 Prompt 提示模板管理机制。</description>
    </item>
    
  </channel>
</rss>
