<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C_C&#43;&#43; on Chengji Zhao&#39;s blog</title>
    <link>https://zcj-git520.github.io/categories/c_c&#43;&#43;/</link>
    <description>Recent content in C_C&#43;&#43; on Chengji Zhao&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 10 Jan 2022 21:00:08 +0800</lastBuildDate><atom:link href="https://zcj-git520.github.io/categories/c_c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数据结构-AVL tree c&#43;&#43;实现</title>
      <link>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-avl-tree-c-%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 10 Jan 2022 21:00:08 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-avl-tree-c-%E5%AE%9E%E7%8E%B0/</guid>
      <description>平衡二叉树 数据结构定义 // 定义树的节点template&amp;lt;class T&amp;gt;class AvrTreeNode{public:AvrTreeNode(){};AvrTreeNode(T data){this-&amp;gt;data = data;left = 0;right = 0;hight = -1;}~AvrTreeNode(){};T data; // 存储的数据AvrTreeNode *left; // 左子树AvrTreeNode *right; // 右子树int hight; // 高度 };// 定义树template&amp;lt;class T&amp;gt;class AvrTree{private:AvrTreeNode&amp;lt;T&amp;gt; *root; // 定义根节点// 插入节点void inseartNode(AvrTreeNode&amp;lt;T&amp;gt;*&amp;amp; node, const T data);void deleteNodeAll(AvrTreeNode&amp;lt;T&amp;gt; *node); // 删除所有节点// 显示节点void DLR(AvrTreeNode&amp;lt;T&amp;gt; *node);void LDR(AvrTreeNode&amp;lt;T&amp;gt; *node);void LRD(AvrTreeNode&amp;lt;T&amp;gt; *node);// 删除*&amp;amp;代表指针引用bool deleteNode(AvrTreeNode&amp;lt;T&amp;gt;*&amp;amp; node, const T data);// void deleteNodeByMerge(AvrTreeNode&amp;lt;T&amp;gt;*&amp;amp; node); // 合并删除// void deleteNodeByCopy(AvrTreeNode&amp;lt;T&amp;gt;*&amp;amp; node); // 复制删除// 单右旋void LL(AvrTreeNode&amp;lt;T&amp;gt; *&amp;amp;node);// 单左旋void RR(AvrTreeNode&amp;lt;T&amp;gt; *&amp;amp;node);// 左右旋void RLR(AvrTreeNode&amp;lt;T&amp;gt; *&amp;amp;node);// 右左旋void LRR(AvrTreeNode&amp;lt;T&amp;gt; *&amp;amp;node);// 求高度的最大值int maxHight(int h1, int h2){return h1&amp;gt;h2 ?</description>
    </item>
    
    <item>
      <title>数据结构-Binary search tree c&#43;&#43;实现</title>
      <link>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-binary-search-tree-c-%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sat, 01 Jan 2022 21:00:08 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-binary-search-tree-c-%E5%AE%9E%E7%8E%B0/</guid>
      <description>二叉查找树 数据结构定义 // 节点的定义template&amp;lt;class T&amp;gt;class BinarySearchTreeNode{public:BinarySearchTreeNode(){left = 0;right = 0;}BinarySearchTreeNode(T data){this-&amp;gt;data = data;left = 0;right = 0;}~BinarySearchTreeNode(){};T data; // 保存的节点的数据BinarySearchTreeNode *left; // 指向左节点BinarySearchTreeNode *right; // 指向右节点};// 树的定义template&amp;lt;class T&amp;gt;class BinarySearchTree{private:BinarySearchTreeNode&amp;lt;T&amp;gt; *root; // 定义头节点int treeNodeNum; // 树的节点数void deleteNodeAll(BinarySearchTreeNode&amp;lt;T&amp;gt; *node); // 删除所有节点// 显示节点void DLR(BinarySearchTreeNode&amp;lt;T&amp;gt; *node);void LDR(BinarySearchTreeNode&amp;lt;T&amp;gt; *node);void LRD(BinarySearchTreeNode&amp;lt;T&amp;gt; *node);// 删除*&amp;amp;代表指针引用void deleteNodeByMerge(BinarySearchTreeNode&amp;lt;T&amp;gt;*&amp;amp; node); // 合并删除void deleteNodeByCopy(BinarySearchTreeNode&amp;lt;T&amp;gt;*&amp;amp; node); // 复制删除public:BinarySearchTree(){root = 0;treeNodeNum = 0;};~BinarySearchTree();// 清空树void clear();// 节点的个数int Nodes(){return treeNodeNum;}// 是否为空树bool isEmpty(){return root == 0;}// 插入数据void inseartNode(const T data);// 深度优先遍历树// 前序遍历(DLR 根-&amp;gt;左-&amp;gt;右)void showNodeByDLR();// 中序遍历(LDR 左-&amp;gt;根-&amp;gt;右)void showNodeByLDR();// 后序遍历(LRD 左-&amp;gt;右-&amp;gt;根)void showNodeByLRD();// 删除节点的数据// 合并删除bool removeNodeMerge(const T data);// 复制删除bool removeNodeCopy(const T data);// 查找数据bool SearchData(const T data);};数据操作  增删改查  数据的插入 template&amp;lt;class T&amp;gt;void BinarySearchTree&amp;lt;T&amp;gt; ::inseartNode(const T data){BinarySearchTreeNode&amp;lt;T&amp;gt; *new_node = new BinarySearchTreeNode&amp;lt;T&amp;gt;(data);// 如果为空树if(isEmpty()){root = new_node; // 新建节点设置为root 节点treeNodeNum ++; // 树的节点数+1return;}BinarySearchTreeNode&amp;lt;T&amp;gt; *node = root;// 遍历树， 找到插入的节点的位置while (node !</description>
    </item>
    
    <item>
      <title>数据结构-栈(基于单项链表)&amp;&amp;队列(基于双向链表)c&#43;&#43;实现</title>
      <link>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88%E5%9F%BA%E4%BA%8E%E5%8D%95%E9%A1%B9%E9%93%BE%E8%A1%A8%E9%98%9F%E5%88%97%E5%9F%BA%E4%BA%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8c-%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 31 Dec 2021 21:00:08 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88%E5%9F%BA%E4%BA%8E%E5%8D%95%E9%A1%B9%E9%93%BE%E8%A1%A8%E9%98%9F%E5%88%97%E5%9F%BA%E4%BA%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8c-%E5%AE%9E%E7%8E%B0/</guid>
      <description>栈 基于单向链表实现
数据结构定义 template&amp;lt;class T&amp;gt;class Stack{private:SinglyList&amp;lt;T&amp;gt; list; // 存储数据的链表public:Stack(/* args */){};~Stack();// 获得栈的长度int len(){return list.getlen();}// 清空栈void clear();// 判断栈是否为空sbool isEmpty();// 将数据放入栈顶void push(T data);// 获取栈顶数据，并删除数据bool pop(T *info);// 获取栈顶数据但不删除数据bool getTopValue(T *info);// 显示所有栈的数据void showStack();};数据操作 template&amp;lt;class T&amp;gt;void Stack&amp;lt;T&amp;gt; ::clear(){list.clear();}template&amp;lt;class T&amp;gt;void Stack&amp;lt;T&amp;gt; ::push(T data){list.</description>
    </item>
    
    <item>
      <title>数据结构-双向链表&amp;&amp;循环双向链表 c&#43;&#43;实现</title>
      <link>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E5%BE%AA%E7%8E%AF%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8-c-%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 30 Dec 2021 21:00:08 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E5%BE%AA%E7%8E%AF%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8-c-%E5%AE%9E%E7%8E%B0/</guid>
      <description>双向链表 数据结构的定义 template&amp;lt;class T&amp;gt;class TwoWayLinkedNode{public:TwoWayLinkedNode(/* args */){}; TwoWayLinkedNode(T data){this-&amp;gt;data = data;this-&amp;gt;prev = 0;this-&amp;gt;next = 0;}~TwoWayLinkedNode(){};T data; // 数据TwoWayLinkedNode *next; // 指向后继节点TwoWayLinkedNode *prev; // 指向前驱};template&amp;lt;class T&amp;gt;class TwoWayList{private:/* data */TwoWayLinkedNode&amp;lt;T&amp;gt; *head; // 头节点TwoWayLinkedNode&amp;lt;T&amp;gt; *tail; // 尾节点int len; // 链表长度public:TwoWayList(){head = 0;tail = 0;len = 0;};~TwoWayList();// 链表的长度+1void setlen(int len){this-&amp;gt;len += len;}; // 返回链表的长度int getlen(){return len;};// 清空链表void clear();// 链表是否为空bool isEmpty(){return head == 0;}// 插入到链表的头部void inseartToHead(T data); // 插入到链表的尾部void inseartTotail(T data); // 插入到链表的indexvoid inseartToindex(int index, T data); // 删除链表的头部元素void deleteToHead();// 删除链表的尾部元素void deleteToTail();// 删除链表的index元素void deleteToIndex(int index);// 查询链表的所有值void queryAll();// 返回index的值bool queryIndex(int index, T *data);// 判断value是否存在bool queryValue(T data);};数据的操作 template&amp;lt;class T&amp;gt;void TwoWayList&amp;lt;T&amp;gt; ::inseartToHead(T data){TwoWayLinkedNode&amp;lt;T&amp;gt; *new_Node = new TwoWayLinkedNode&amp;lt;T&amp;gt;(data); // 链表为空if (isEmpty()){head = tail = new_Node;}else{new_Node-&amp;gt;next = head; // 新节点的后驱指向头节点head-&amp;gt;prev = new_Node; // 头节点的前驱指向新节点head = new_Node; // 将新节点设置新的头节点}setlen(addOne);}template&amp;lt;class T&amp;gt;void TwoWayList&amp;lt;T&amp;gt; ::inseartTotail(T data){TwoWayLinkedNode&amp;lt;T&amp;gt; *new_Node = new TwoWayLinkedNode&amp;lt;T&amp;gt;(data);if(isEmpty()){head = tail = new_Node;}else{tail-&amp;gt;next = new_Node; // 尾节点的next指向新节点new_Node-&amp;gt;prev = tail; // 新节点的前驱指向尾节点tail = new_Node; // 将新节点设置为新的尾节点}setlen(addOne);}template&amp;lt;class T&amp;gt;void TwoWayList&amp;lt;T&amp;gt; ::inseartToindex(int index, T data){int len = getlen();if(index == 0){inseartToHead(data);return;}// 链表为空，当index 小于0 或者大于等于链表数，采用尾插法if (isEmpty() || index &amp;lt; 0 || index &amp;gt;= len){inseartTotail(data);return;}TwoWayLinkedNode&amp;lt;T&amp;gt; *node = head;int __index = 1;while (__index !</description>
    </item>
    
    <item>
      <title>数据结构-单向链表c&#43;&#43;语言实现</title>
      <link>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8c-%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 27 Dec 2021 22:00:08 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8c-%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</guid>
      <description>单向链表 数据结构的定义 数据节点的类的定义 class SinglyLinkedNode{public:SinglyLinkedNode(){next = 0;};// 创建新的nodeSinglyLinkedNode(int data){this-&amp;gt;data = data;next = 0;};~SinglyLinkedNode(){};int data; // 链表的数据SinglyLinkedNode *next; // 指向下一个节点};链表的数据结构(类的定义) class SinglyList{private:/* data */SinglyLinkedNode *head; // 头节点SinglyLinkedNode *tail; // 尾节点int len; // 链表长度public:SinglyList(){head = 0;tail = 0;len = 0;};~SinglyList();// 链表的长度+1void setlen(int len){this-&amp;gt;len += len;}; // 返回链表的长度int getlen(){return len;};// 链表是否为空bool ismpty(){return head == 0;}// 插入到链表的头部void inseartToHead(int data); // 插入到链表的尾部void inseartTotail(int data); // 插入到链表的indexvoid inseartToindex(int index, int data); // 删除链表的头部元素void deleteToHead();// 删除链表的尾部元素void deleteToTail();// 删除链表的index元素void deleteToIndex(int index);// 查询链表的所有值void queryAll();// 返回index的值int queryIndex(int index);// 判断value是否存在bool queryValue(int data);};数据的插入 插入到链表的尾部 void SinglyList::inseartTotail(int data){// 定义nodeSinglyLinkedNode *new_node;new_node = new SinglyLinkedNode(data);// 链表为空if (ismpty()){head = tail = new_node; // 头尾节点都指向新创节点setlen(addOne); // 节点数+1return;}tail-&amp;gt;next = new_node;tail = tail-&amp;gt;next;setlen(addOne);}插入到链表的头部 void SinglyList::inseartToHead(int data){SinglyLinkedNode *node;node = new SinglyLinkedNode(data);if (ismpty()){head = tail = node;setlen(addOne);return ;}node-&amp;gt;next = head;head = node;setlen(addOne);}插入到链表的index void SinglyList::inseartToindex(int index, int data){int len;len = getlen()-1;// 如果链表为空, 或者插入到末尾,或者index &amp;lt;0 采用尾插法添加到链表中if (ismpty() || index ==len || index &amp;lt; 0){inseartTotail(data);return;}if(index == 0){inseartToHead(data);return;}SinglyLinkedNode *node;node = new SinglyLinkedNode(data);int __index = 1;for (node = head; node !</description>
    </item>
    
    <item>
      <title>c/c&#43;&#43;安全指南</title>
      <link>https://zcj-git520.github.io/p/c/c-%E5%AE%89%E5%85%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Thu, 28 Oct 2021 22:00:08 +0800</pubDate>
      
      <guid>https://zcj-git520.github.io/p/c/c-%E5%AE%89%E5%85%A8%E6%8C%87%E5%8D%97/</guid>
      <description>文章来源 鹅厂(腾讯)代码安全指南
通用安全指南 C/C++使用错误 【必须】不得直接使用无长度限制的字符拷贝函数 不应直接使用legacy的字符串拷贝、输入函数，如strcpy、strcat、sprintf、wcscpy、mbscpy等，这些函数的特征是：可以输出一长串字符串，而不限制长度。如果环境允许，应当使用其_s安全版本替代，或者使用n版本函数（如：snprintf，vsnprintf）。
若使用形如sscanf之类的函数时，在处理字符串输入时应当通过%10s这样的方式来严格限制字符串长度，同时确保字符串末尾有\0。如果环境允许，应当使用_s安全版本。
但是注意，虽然MSVC 2015时默认引入结尾为0版本的snprintf（行为等同于C99定义的snprintf）。但更早期的版本中，MSVC的snprintf可能是_snprintf的宏。而_snprintf是不保证\0结尾的（见本节后半部分）。
（MSVC） Beginning with the UCRT in Visual Studio 2015 and Windows 10, snprintf is no longer identical to _snprintf. The snprintf function behavior is now C99 standard compliant. 从Visual Studio 2015和Windows 10中的UCRT开始，snprintf不再与_snprintf相同。snprintf函数行为现在符合C99标准。 请参考：https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l?redirectedfrom=MSDN&amp;amp;view=vs-2019 因此，在使用n系列拷贝函数时，要确保正确计算缓冲区长度，同时，如果你不确定是否代码在各个编译器下都能确保末尾有0时，建议可以适当增加1字节输入缓冲区，并将其置为\0，以保证输出的字符串结尾一定有\0。
// Good char buf[101] = {0}; snprintf(buf, sizeof(buf) - 1, &amp;#34;foobar ...&amp;#34;, ...); 一些需要注意的函数，例如strncpy和_snprintf是不安全的。 strncpy不应当被视为strcpy的n系列函数，它只是恰巧与其他n系列函数名字很像而已。strncpy在复制时，如果复制的长度超过n，不会在结尾补\0。
同样，MSVC _snprintf系列函数在超过或等于n时也不会以0结尾。如果后续使用非0结尾的字符串，可能泄露相邻的内容或者导致程序崩溃。
// Bad char a[4] = {0}; _snprintf(a, 4, &amp;#34;%s&amp;#34;, &amp;#34;AAAA&amp;#34;); foo = strlen(a); 上述代码在MSVC中执行后， a[4] == &amp;lsquo;A&amp;rsquo;，因此字符串未以0结尾。a的内容是&amp;quot;AAAA&amp;quot;，调用strlen(a)则会越界访问。因此，正确的操作举例如下：</description>
    </item>
    
  </channel>
</rss>
