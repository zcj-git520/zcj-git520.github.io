<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Chengji Zhao&#39;s blog</title>
        <link>https://zcj-git520.github.io/</link>
        <description>Recent content on Chengji Zhao&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 18 Oct 2021 22:00:38 +0800</lastBuildDate><atom:link href="https://zcj-git520.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>内存管理</title>
        <link>https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
        <pubDate>Mon, 18 Oct 2021 22:00:38 +0800</pubDate>
        
        <guid>https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
        <description>&lt;img src="https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/6.png" alt="Featured image of post 内存管理" /&gt;&lt;h2 id=&#34;虚拟地址空间布局&#34;&gt;虚拟地址空间布局&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;程序通过编译成为一堆的机器指令写入可执行文件，程序在运行是会将可执行文件加载在计算机的内存中
在虚拟地址空间分布中处于代码段。&lt;/li&gt;
&lt;li&gt;程序中的局部变量、函数的参数、函数的返回值等数据会保存在虚拟地址的栈中(栈是先进后出的数据结构)
栈空间的编译器分配和释放。&lt;/li&gt;
&lt;li&gt;程序的全局变量和静态变量会保存在虚拟地址的数据段&lt;/li&gt;
&lt;li&gt;动态分配内存的地址会保存在虚拟地址空间的堆上。堆空间是动态开辟的内存空间，需要主动开辟和释放。或者
调用GC释放  &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 68; 
			flex-basis: 165px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/1.png&#34; data-size=&#34;547x795&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/1.png&#34;
			width=&#34;547&#34;
			height=&#34;795&#34;
			srcset=&#34;https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/1_hu86f620222550b5f6f6b08ef9da75c8f9_105109_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/1_hu86f620222550b5f6f6b08ef9da75c8f9_105109_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;堆内存管理&#34;&gt;堆内存管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;堆内存空间不是编译器分配，而是有程序动态分配的内存空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;手动垃圾回收&#34;&gt;手动垃圾回收&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;需要程序主动释放没有用的数据所在的堆空间。如：c++中调用new()函数向计算机申请开辟内存空间后，使用delete或delete[]释放不需要的
堆内存空间。这一类是手动内存分配和释放。手动内存分配使用不恰当也会造成：内存泄露
悬挂指针的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;过早释放会造成悬挂指针（野指针）：提前释放了动态的堆内存的空间，当程序访问这段地址时会报错。因为这段提前释放的内存空间被清空、
重新分配或者被操作系统回收。释放指针时将指针赋值为NULL，在访问时对指针进行判断是否为NULL&lt;/li&gt;
&lt;li&gt;不释放内存会造成内存泄漏：堆内存需要手动释放，当程序运行结束不释放，这段内存就会被一直占用。如果
一直在分配不释放会一直占用计算机的内存，直到内存被占完。将new与delete配套使用，使用工具检测或者打印出堆信息&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;自动垃圾回收gc&#34;&gt;自动垃圾回收（GC）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在程序运行过程中自动释放没有用的数据所在的堆空间（垃圾回收).在虚拟内存空间中能从栈或者数据段的根节点追踪不到的数据为没用的数据
（内存垃圾），常用的算法：标记法, 计数法&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;标记法回收&#34;&gt;标记法回收&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;标记法：将栈或者数据段作为根（root）进行追踪,将能追踪得的数据（堆空间）进行标记。没有被标记的数据
（堆空间）就是垃圾，将这部分垃圾进行回收。三色抽象：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;垃圾回收开始时，将所有数据为白色&lt;/li&gt;
&lt;li&gt;垃圾回收开始时，将所有的栈或者数据段的根节点设置为灰色&lt;/li&gt;
&lt;li&gt;在根据根节点进行追踪，直到所有的数据节点追踪结束后将根节点置为黑色，在将根节点的下一节点作为根节点进行追踪&lt;/li&gt;
&lt;li&gt;所有的数据节点都追踪完后，会剩下黑色和白色的数据节点。黑色表示有用的数据。白色为无用的数据。将白色的数据进行回收（堆空间的释放）
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 106; 
			flex-basis: 256px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/2.png&#34; data-size=&#34;739x692&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/2.png&#34;
			width=&#34;739&#34;
			height=&#34;692&#34;
			srcset=&#34;https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/2_hue8f862e9d9f89ba7caf7892b05f14474_215690_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/2_hue8f862e9d9f89ba7caf7892b05f14474_215690_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;标记法实现简单，但是会造成内存的碎片化(内存块中是可使用小内存块，造成大内存块不能使用这块内存，这些小小内存块也不能使用)&lt;/li&gt;
&lt;li&gt;因为内存碎片化的问题诞生了&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;标记整理法，就是标记法之后，将有用的数据堆内存空间移动在一起，释放更多连续的堆空间,但是这种做法带来
很大的开销，因为需要不断的扫描内存和移动内存&lt;/li&gt;
&lt;li&gt;复制回收法。将堆内存分为from和To两个相同的堆内存空间。程序执行时，使用from的堆空间。垃圾回收时会扫描from
的堆内存空间，将有用的数据复制到To的堆空间上。垃圾回收结束时，将To堆空间设置为From堆空间。将原来的from
堆空间全部回收后置为Ton堆空间。但是复制回收法只会使用一般的堆内存空间，造成堆内存空间利用率不高  &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 190; 
			flex-basis: 456px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/3.png&#34; data-size=&#34;746x392&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/3.png&#34;
			width=&#34;746&#34;
			height=&#34;392&#34;
			srcset=&#34;https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/3_hu871100705c5f0bb9545d50108b3adbcf_40782_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/3_hu871100705c5f0bb9545d50108b3adbcf_40782_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;分代法回收：大部分对象都会在年轻时候死亡（弱分代假说）把新建的对象称之为新生代对象。经过特定次数的GC(垃圾回收)数据依然有用的对象称为
老年代对象。而大部分会在新生代对象就会垃圾回收了，在结合复制回收法使用  &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 165; 
			flex-basis: 397px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/4.png&#34; data-size=&#34;1202x725&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/4.png&#34;
			width=&#34;1202&#34;
			height=&#34;725&#34;
			srcset=&#34;https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/4_hude966255b53ebc705801aec78916c5d7_175139_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/4_hude966255b53ebc705801aec78916c5d7_175139_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;计数法回收&#34;&gt;计数法回收&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;引用计数指的是对象被引用的次数，程序在运行过程中会更新引用次数。对象引用越多，计数越大，当计数为0时，回收该对象（堆内存空间）
引用计数法可以在运行中更新对象的计数，可以及时判断计数为 0的对象，然后对其及时回收， 但是频繁的更新引用计数也会带来资源消耗  &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 103; 
			flex-basis: 248px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/5.png&#34; data-size=&#34;712x688&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/5.png&#34;
			width=&#34;712&#34;
			height=&#34;688&#34;
			srcset=&#34;https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/5_hu5f49777c171d0884056300bcd3c13161_71471_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/5_hu5f49777c171d0884056300bcd3c13161_71471_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;垃圾回收模式&#34;&gt;垃圾回收模式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;增量式的垃圾回收模式：SWT是用户承程序停下工作处理垃圾回收，但是为了提高cpu执行效率，会减少SWT的时间，经垃圾回收工作分多次进行（用户程序与垃圾回收交替执行）&lt;/li&gt;
&lt;li&gt;三色不变式：在增量式垃圾回收模式在进行垃圾回收时，会造成用户程序对标色的数据进行更改，当在次执行垃圾回收时，可能会将有用的数据当作垃圾回收了，在标色法中，当黑色数据节点可以引用白色的数据节点，但是没有灰色节点能引用这个白色节点，白色数据节点就被当作垃圾被回收
避免这样的发生，在垃圾回收时建立读写屏障。在三色中确保黑色的数据节点不引用白色的数据节点，就不会误判有用的数据当作垃圾回收了，这种叫做：强三色不变式
如果当黑色的数据节点能引用白色数据节点，同时确保回收节点也能引用白色节点，也能避免有用的数据被当作垃圾回收，这叫：弱三色不变式  &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 177; 
			flex-basis: 425px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/6.png&#34; data-size=&#34;1302x734&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/6.png&#34;
			width=&#34;1302&#34;
			height=&#34;734&#34;
			srcset=&#34;https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/6_hu61bd622d583377d86db238f2ea3bdaa9_262966_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/6_hu61bd622d583377d86db238f2ea3bdaa9_262966_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;并行垃圾回收：在多核下，使用多线程对垃圾回收，需要做好的负载均衡和规避数重复处理带来的问题，如在复制回收中，可能将同样的数据从from复制到to&lt;/li&gt;
&lt;li&gt;并发垃圾回收：垃圾回收与用户程序并发执行，可能会造成垃圾回收与用户程序的资源竞争等问题等&lt;/li&gt;
&lt;li&gt;主体并发回收：在时刻使用swt回收，在莫时刻又使用并发垃圾回收&lt;/li&gt;
&lt;li&gt;主体并发增量式回收: 是融合了增量式的垃圾回收模式和主体并发回收模式  &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 67; 
			flex-basis: 161px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/7.png&#34; data-size=&#34;549x817&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/7.png&#34;
			width=&#34;549&#34;
			height=&#34;817&#34;
			srcset=&#34;https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/7_hu9a89830b3bbfb2c96296aa9cbf536ee0_141902_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/7_hu9a89830b3bbfb2c96296aa9cbf536ee0_141902_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;p&gt;1.&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/people/kylin-lab&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zhihu.com/people/kylin-lab&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Go Channel的深入理解</title>
        <link>https://zcj-git520.github.io/p/go-channel%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</link>
        <pubDate>Fri, 15 Oct 2021 22:00:38 +0800</pubDate>
        
        <guid>https://zcj-git520.github.io/p/go-channel%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</guid>
        <description>&lt;img src="https://zcj-git520.github.io/p/go-channel%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/3.png" alt="Featured image of post Go Channel的深入理解" /&gt;&lt;h1 id=&#34;go-channel&#34;&gt;go Channel&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;（&lt;strong&gt;Do not communicate by sharing memory; instead, share memory by communicating&lt;/strong&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;csp并发模型&#34;&gt;CSP并发模型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CSP&lt;/strong&gt; 即&lt;strong&gt;通信顺序进程&lt;/strong&gt;、&lt;strong&gt;交谈循序程序&lt;/strong&gt;，又被译为&lt;strong&gt;交换消息的循序程序&lt;/strong&gt;(communicating sequential processes)，它是一种用来描述并发性系统之间进行交互的模型。&lt;/li&gt;
&lt;li&gt;go  Channe是一种特殊的类型，是有特定类型的队列。是链接goroutine(协程)的通信机制，通过通信共享内存而不是通过共享内存而实现通信.&lt;/li&gt;
&lt;li&gt;Channel 收发操作均遵循了先进先出的设计，具体规则如下：
&lt;ol&gt;
&lt;li&gt;先从 Channel 读取数据的 Goroutine 会先接收到数据；&lt;/li&gt;
&lt;li&gt;先向 Channel 发送数据的 Goroutine 会得到先发送数据的权利；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 324; 
			flex-basis: 779px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/go-channel%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/1.png&#34; data-size=&#34;646x199&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/go-channel%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/1.png&#34;
			width=&#34;646&#34;
			height=&#34;199&#34;
			srcset=&#34;https://zcj-git520.github.io/p/go-channel%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/1_hu9f71752e01ad0714d9e001d394dc9e2e_27512_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/go-channel%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/1_hu9f71752e01ad0714d9e001d394dc9e2e_27512_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;channel-数据结构定义&#34;&gt;channel 数据结构定义：&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type hchan struct {
	// 队列中存储的数量
	qcount   uint           // total data in the queue
	//环形队列的大小(最大存储数量 )
	dataqsiz uint           // size of the circular queue
	// 存放环形队列的数据，数组
	buf      unsafe.Pointer // points to an array of dataqsiz elements
	// 元素的大小
	elemsize uint16
	// 是否关闭的标识
	closed   uint32
	// 元素的类型(指向类型的元数据 )
	elemtype *_type // element type
	// 当前发送数据在环形队列的索引
	sendx    uint   // send index
	// 当前接受数据在环形队列的索引 
	recvx    uint   // receive index
	// 接收者等待队列（&amp;lt;-ch）阻塞在channel的协程队列
	recvq    waitq  // list of recv waiters
	// 发送者等待队列（ch&amp;lt;- data）阻塞在channel的协程队列
	sendq    waitq  // list of send waiters
	//锁保护hchan中的所有字段，以及几个
	//在这个通道上阻塞sudogs中的字段
	//保持这个锁时不要改变另一个G的状态
	//(特别是，不要准备一个G)，因为这可能会死锁
	//栈收缩。
	lock mutex  // 保护hchan中的所有字段，保持协程的状态不被更改，避免造成栈收缩引起的死锁，使用互斥锁解决程序中可能存在的线程竞争问题是很常见的
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;发送者/接收者等待队列的结构：一个双向链表
type waitq struct {
	first *sudog
	last  *sudog
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;channel  sudog(等待队列)结构如下
type sudog struct {
	// The following fields are protected by the hchan.lock of the
	// channel this sudog is blocking on. shrinkstack depends on
	// this for sudogs involved in channel ops.
	//以下字段受hchan保护。锁的
  	//这个sudog正在阻塞。shrinkstack取决于
	//这是为涉及通道操作的sudogs。

	g *g  // 等待的协程协程
	next *sudog
	prev *sudog
	// 数据元素(可以指向堆栈)，等待发送/接收的数据
	elem unsafe.Pointer // data element (may point to stack)

	// The following fields are never accessed concurrently.
	// For channels, waitlink is only accessed by g.
	// For semaphores, all fields (including the ones above)
	// are only accessed when holding a semaRoot lock.
	//下面的字段永远不会并发访问。
   	//对于通道，waitlink只被g访问。
	//对于信号量，所有的字段(包括上面的字段)
	//只在持有semaRoot锁时访问。
	acquiretime int64
	releasetime int64
	ticket      uint32

	// isSelect indicates g is participating in a select, so
	// g.selectDone must be CAS&#39;d to win the wake-up race.
	// 表示g被选择
	isSelect bool

	// success indicates whether communication over channel c
	// succeeded. It is true if the goroutine was awoken because a
	// value was delivered over channel c, and false if awoken
	// because c was closed.
	//成功表示是否通过通道c通信
	// 成功了。 如果 goroutine 被唤醒是因为一个
	// 值通过通道 c 传递，如果被唤醒则返回 false
	// 因为 c 被关闭了
	success bool  // c 因关闭而唤醒

	parent   *sudog // semaRoot binary tree
	waitlink *sudog // g.waiting list or semaRoot
	waittail *sudog // semaRoot
    // 等待的channel被唤醒
	c        *hchan // channel
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;结构如图所示
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 188; 
			flex-basis: 451px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/go-channel%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/3.png&#34; data-size=&#34;1618x860&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/go-channel%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/3.png&#34;
			width=&#34;1618&#34;
			height=&#34;860&#34;
			srcset=&#34;https://zcj-git520.github.io/p/go-channel%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/3_huc32f323c0433538c753e80bb5a9a01bb_276268_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/go-channel%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/3_huc32f323c0433538c753e80bb5a9a01bb_276268_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;channel-创建&#34;&gt;channel 创建&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;channel 和 切片、map一样，需要使用make(chan type, int )才能使用,应为make()会调用makeChan()初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;makech函数源码如下:
// 参数类型：创建chan的类型和环型缓冲区的数量
func makechan(t *chantype, size int) *hchan {
	elem := t.elem

	// compiler checks this but be safe.
	if elem.size &amp;gt;= 1&amp;lt;&amp;lt;16 {
		throw(&amp;quot;makechan: invalid channel element type&amp;quot;)
	}
	if hchanSize%maxAlign != 0 || elem.align &amp;gt; maxAlign {
		throw(&amp;quot;makechan: bad alignment&amp;quot;)
	}
	//判断环型缓冲区是否溢出
	mem, overflow := math.MulUintptr(elem.size, uintptr(size))
	if overflow || mem &amp;gt; maxAlloc-hchanSize || size &amp;lt; 0 {
		panic(plainError(&amp;quot;makechan: size out of range&amp;quot;))
	}

	// Hchan does not contain pointers interesting for GC when elements stored in buf do not contain pointers.
	// buf points into the same allocation, elemtype is persistent.
	// SudoG&#39;s are referenced from their owning thread so they can&#39;t be collected.
	// TODO(dvyukov,rlh): Rethink when collector can move allocated objects.
	var c *hchan
	switch {
	case mem == 0:
		// Queue or element size is zero.
		// 当队列或者元素大小为0时，定义无缓冲chan（同步chan）
		c = (*hchan)(mallocgc(hchanSize, nil, true))
		// Race detector uses this location for synchronization.
        // Race 竞争检查利用这个地址来进行同步操作
		c.buf = c.raceaddr()
	case elem.ptrdata == 0:
		// Elements do not contain pointers.
		// Allocate hchan and buf in one call.
        // 元素不包含指针时。一次分配 hchan 和 buf 的内存。
		c = (*hchan)(mallocgc(hchanSize+mem, nil, true))
		c.buf = add(unsafe.Pointer(c), hchanSize)
	default:
		// Elements contain pointers.
        // 定义带缓存的chan或者异步的chan
		c = new(hchan)
		c.buf = mallocgc(mem, elem, true)
	}

	c.elemsize = uint16(elem.size)  // chan元素的大小
	c.elemtype = elem               // chan元素的类型
	c.dataqsiz = uint(size)        //  chan缓存区大小
	lockInit(&amp;amp;c.lock, lockRankHchan)  //初始化互斥锁

	if debugChan {
		print(&amp;quot;makechan: chan=&amp;quot;, c, &amp;quot;; elemsize=&amp;quot;, elem.size, &amp;quot;; dataqsiz=&amp;quot;, size, &amp;quot;\n&amp;quot;)
	}
	return c
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;channel创建过程：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;编译检查、缓冲区大小检查，判断是否溢出&lt;/li&gt;
&lt;li&gt;判断chan的类型&lt;br&gt;
1、当创建无缓冲chan时,调用mallocgc()在堆上为chan开辟hchanSize的buf缓存内存空间&lt;br&gt;
2、创建带缓冲的chan时,判断元素的类型是否为指针类型，若不是，则mallocgc()在堆上为chan和buf缓冲区数组开辟一段大小为 hchanSize+mem连续的内存空间。若是则调用mallocgc()在堆上分别为chan和buf缓冲区分配连续内存空间。
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 187; 
			flex-basis: 450px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/go-channel%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/4.png&#34; data-size=&#34;1601x852&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/go-channel%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/4.png&#34;
			width=&#34;1601&#34;
			height=&#34;852&#34;
			srcset=&#34;https://zcj-git520.github.io/p/go-channel%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/4_hua8215d19cb3bccd8709e0a6c6f7245c2_228324_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/go-channel%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/4_hua8215d19cb3bccd8709e0a6c6f7245c2_228324_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;channel-发送数据与接收数据&#34;&gt;channel 发送数据与接收数据&lt;/h2&gt;
&lt;h3 id=&#34;channel-发送数据&#34;&gt;channel 发送数据&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;chan &amp;lt;- data&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chan发送数据源码如下:
func chansend(c *hchan, ep unsafe.Pointer, block bool, callerpc uintptr) bool {
    // 判断chan是否被初始化，向chan为nil的chan发送数据将会永久阻塞
	if c == nil {
		if !block {
			return false
		}
        // 使当前的groutine休眠
		gopark(nil, nil, waitReasonChanSendNilChan, traceEvGoStop, 2)
		throw(&amp;quot;unreachable&amp;quot;)
	}

	if debugChan {
		print(&amp;quot;chansend: chan=&amp;quot;, c, &amp;quot;\n&amp;quot;)
	}
     // 检查在没有获取锁的情况下会导致发送失败的非阻塞操作
	if raceenabled {
		racereadpc(c.raceaddr(), callerpc, funcPC(chansend))
	}

	// Fast path: check for failed non-blocking operation without acquiring the lock.
	//
	// After observing that the channel is not closed, we observe that the channel is
	// not ready for sending. Each of these observations is a single word-sized read
	// (first c.closed and second full()).
	// Because a closed channel cannot transition from &#39;ready for sending&#39; to
	// &#39;not ready for sending&#39;, even if the channel is closed between the two observations,
	// they imply a moment between the two when the channel was both not yet closed
	// and not ready for sending. We behave as if we observed the channel at that moment,
	// and report that the send cannot proceed.
	//
	// It is okay if the reads are reordered here: if we observe that the channel is not
	// ready for sending and then observe that it is not closed, that implies that the
	// channel wasn&#39;t closed during the first observation. However, nothing here
	// guarantees forward progress. We rely on the side effects of lock release in
	// chanrecv() and closechan() to update this thread&#39;s view of c.closed and full().
	if !block &amp;amp;&amp;amp; c.closed == 0 &amp;amp;&amp;amp; full(c) {
		return false
	}

	var t0 int64
	if blockprofilerate &amp;gt; 0 {
		t0 = cputicks()
	}
    // 获得同步锁
	lock(&amp;amp;c.lock)
    // 当chan关闭时,释放锁，并panic
    // 向也关闭的chan发送消息,会引发panic
	if c.closed != 0 {
		unlock(&amp;amp;c.lock)
		panic(plainError(&amp;quot;send on closed channel&amp;quot;))
	}
    // 如果接收队列中有等待的接收者，直接发送给接收者（有缓存区时，会绕过缓存区）
	if sg := c.recvq.dequeue(); sg != nil {
		// Found a waiting receiver. We pass the value we want to send
		// directly to the receiver, bypassing the channel buffer (if any).
		send(c, sg, ep, func() { unlock(&amp;amp;c.lock) }, 3)
		return true
	}

	if c.qcount &amp;lt; c.dataqsiz {
        // 没有接收者，当有缓存区时，将要发送的元素放入队列中
		// Space is available in the channel buffer. Enqueue the element to send.
		qp := chanbuf(c, c.sendx)  // 获取缓存地址
		if raceenabled {
			racenotify(c, c.sendx, nil)
		}
		typedmemmove(c.elemtype, qp, ep)
		c.sendx++ // 指向下一个存储的位置
		if c.sendx == c.dataqsiz {
			c.sendx = 0
		}
		c.qcount++ // 缓存数量相加
		unlock(&amp;amp;c.lock)
		return true
	}

	if !block {
		unlock(&amp;amp;c.lock)
		return false
	}
    // 缓存区满了，将当前发送协程加入到等待send队列
	// Block on the channel. Some receiver will complete our operation for us.
	gp := getg() // 获取当前的g发送协程
	mysg := acquireSudog()// 创建sudog等待队列
	mysg.releasetime = 0
	if t0 != 0 {
		mysg.releasetime = -1
	}
	// No stack splits between assigning elem and enqueuing mysg
	// on gp.waiting where copystack can find it.
	mysg.elem = ep
	mysg.waitlink = nil
    // 把当前的发送协程与等待队列绑定
	mysg.g = gp 
	mysg.isSelect = false
	mysg.c = c
	gp.waiting = mysg
	gp.param = nil
    // 加入到发送等待队列中
	c.sendq.enqueue(mysg)
	// Signal to anyone trying to shrink our stack that we&#39;re about
	// to park on a channel. The window between when this G&#39;s status
	// changes and when we set gp.activeStackChans is not safe for
	// stack shrinking.
	atomic.Store8(&amp;amp;gp.parkingOnChan, 1)
	gopark(chanparkcommit, unsafe.Pointer(&amp;amp;c.lock), waitReasonChanSend, traceEvGoBlockSend, 2)
	// Ensure the value being sent is kept alive until the
	// receiver copies it out. The sudog has a pointer to the
	// stack object, but sudogs aren&#39;t considered as roots of the
	// stack tracer.
	KeepAlive(ep)

	// someone woke us up.
    // 发送协程被唤醒，解除等待队列的阻塞状态
    // 判断的等待队列是否在休眠
	if mysg != gp.waiting {
		throw(&amp;quot;G waiting list is corrupted&amp;quot;)
	}
	gp.waiting = nil
	gp.activeStackChans = false
	closed := !mysg.success
	gp.param = nil
	if mysg.releasetime &amp;gt; 0 {
		blockevent(mysg.releasetime-t0, 2)
	}
	mysg.c = nil
	releaseSudog(mysg) // 释放等待队列
	if closed {
		if c.closed == 0 {
			throw(&amp;quot;chansend: spurious wakeup&amp;quot;)
		}
		panic(plainError(&amp;quot;send on closed channel&amp;quot;))
	}
	return true
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;channel 发送数据总结&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;判断chan是否被初始化，向chan为nil的chan发送数据将会永久阻塞&lt;/li&gt;
&lt;li&gt;检查在没有获取锁， 在没有获取锁的情况下会导致发送失败的非阻塞操作&lt;/li&gt;
&lt;li&gt;检查chan是否关闭，向也关闭的chan发送消息,会引发panic&lt;/li&gt;
&lt;li&gt;如果接收队列中有等待的接收者，直接发送给接收者（有缓存区时，会绕过缓存区）&lt;/li&gt;
&lt;li&gt;没有接收者，当有缓存区时，将要发送的元素放入队列中&lt;/li&gt;
&lt;li&gt;缓存区满了，将当前协程加入到send等待队列，并阻塞&lt;/li&gt;
&lt;li&gt;当发送协程被唤醒，解除等待队列的阻塞状态，释放等待队列
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 163; 
			flex-basis: 392px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/go-channel%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/5.png&#34; data-size=&#34;1338x819&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/go-channel%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/5.png&#34;
			width=&#34;1338&#34;
			height=&#34;819&#34;
			srcset=&#34;https://zcj-git520.github.io/p/go-channel%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/5_huac78e02842841011bb19217a58ea5d43_197926_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/go-channel%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/5_huac78e02842841011bb19217a58ea5d43_197926_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;channel-接收数据&#34;&gt;channel 接收数据&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;- data&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chan 接收数据源码如下:
func chanrecv(c *hchan, ep unsafe.Pointer, block bool) (selected, received bool) {
	// raceenabled: don&#39;t need to check ep, as it is always on the stack
	// or is new memory allocated by reflect.

	if debugChan {
		print(&amp;quot;chanrecv: chan=&amp;quot;, c, &amp;quot;\n&amp;quot;)
	}
    // 判断chan是否初始化，若没有初始化，接收channel数据将阻塞
	if c == nil {
		if !block {
			return
		}
		gopark(nil, nil, waitReasonChanReceiveNilChan, traceEvGoStop, 2)
		throw(&amp;quot;unreachable&amp;quot;)
	}
    // 检查chan是否为空，是否关闭
	// Fast path: check for failed non-blocking operation without acquiring the lock.
	if !block &amp;amp;&amp;amp; empty(c) {
		// After observing that the channel is not ready for receiving, we observe whether the
		// channel is closed.
		//
		// Reordering of these checks could lead to incorrect behavior when racing with a close.
		// For example, if the channel was open and not empty, was closed, and then drained,
		// reordered reads could incorrectly indicate &amp;quot;open and empty&amp;quot;. To prevent reordering,
		// we use atomic loads for both checks, and rely on emptying and closing to happen in
		// separate critical sections under the same lock.  This assumption fails when closing
		// an unbuffered channel with a blocked send, but that is an error condition anyway.
		if atomic.Load(&amp;amp;c.closed) == 0 {  // chan关闭，就返回
			// Because a channel cannot be reopened, the later observation of the channel
			// being not closed implies that it was also not closed at the moment of the
			// first observation. We behave as if we observed the channel at that moment
			// and report that the receive cannot proceed.
			return
		}
		// The channel is irreversibly closed. Re-check whether the channel has any pending data
		// to receive, which could have arrived between the empty and closed checks above.
		// Sequential consistency is also required here, when racing with such a send.
		if empty(c) { // 如果chan为空
			// The channel is irreversibly closed and empty.
            // // channel 不可逆的关闭了且为空
			if raceenabled {
				raceacquire(c.raceaddr())
			}
			if ep != nil {
				typedmemclr(c.elemtype, ep)
			}
			return true, false
		}
	}

	var t0 int64
	if blockprofilerate &amp;gt; 0 {
		t0 = cputicks()
	}

	lock(&amp;amp;c.lock)
    // chan 关闭了，清理缓冲区
	if c.closed != 0 &amp;amp;&amp;amp; c.qcount == 0 {
		if raceenabled {
			raceacquire(c.raceaddr())
		}
		unlock(&amp;amp;c.lock)
		if ep != nil {
			typedmemclr(c.elemtype, ep)
		}
		return true, false
	}
    //  找到一个等待的发件人。如果缓冲区大小为 0，则直接从发送方接收值。否则，从队列的头部接收 
    // 并将发送者的值添加到队列的尾部（两者都映射到 
    // 相同的缓冲区槽，因为队列已满）
      // 如果是无缓冲队列，直接从发送方取值
      // 如果是待缓冲的区，就从缓冲区头部获取值，并将发送着的值保存在缓冲区后
	if sg := c.sendq.dequeue(); sg != nil {
		// Found a waiting sender. If buffer is size 0, receive value
		// directly from sender. Otherwise, receive from head of queue
		// and add sender&#39;s value to the tail of the queue (both map to
		// the same buffer slot because the queue is full).
		recv(c, sg, ep, func() { unlock(&amp;amp;c.lock) }, 3)
		return true, true
	}
    // 没有发送的协程，但是缓冲区有元素，直接获取缓冲区头部的值
	if c.qcount &amp;gt; 0 {
		// Receive directly from queue
		qp := chanbuf(c, c.recvx)
		if raceenabled {
			racenotify(c, c.recvx, nil)
		}
		if ep != nil {
			typedmemmove(c.elemtype, ep, qp)
		}
		typedmemclr(c.elemtype, qp)
		c.recvx++
		if c.recvx == c.dataqsiz {
			c.recvx = 0
		}
		c.qcount--
		unlock(&amp;amp;c.lock)
		return true, true
	}

	if !block {
		unlock(&amp;amp;c.lock)
		return false, false
	}
    // 当没有发送数据的的协程，且缓冲区值，就将接收的协程放入等待队列中
	// no sender available: block on this channel.
	gp := getg()  // 获取当前接收协程
	mysg := acquireSudog() // 创建等待队列
	mysg.releasetime = 0
	if t0 != 0 {
		mysg.releasetime = -1
	}
	// No stack splits between assigning elem and enqueuing mysg
	// on gp.waiting where copystack can find it.
	mysg.elem = ep
	mysg.waitlink = nil
	gp.waiting = mysg 
    // 将接送写协程与等待队列绑定
	mysg.g = gp
	mysg.isSelect = false
	mysg.c = c
	gp.param = nil
    // 放入在协程的等待队列中
	c.recvq.enqueue(mysg)
	// Signal to anyone trying to shrink our stack that we&#39;re about
	// to park on a channel. The window between when this G&#39;s status
	// changes and when we set gp.activeStackChans is not safe for
	// stack shrinking.
	atomic.Store8(&amp;amp;gp.parkingOnChan, 1)
	gopark(chanparkcommit, unsafe.Pointer(&amp;amp;c.lock), waitReasonChanReceive, traceEvGoBlockRecv, 2)
    //当接收协程被唤醒时，解除阻塞状态
	// someone woke us up
	if mysg != gp.waiting {
		throw(&amp;quot;G waiting list is corrupted&amp;quot;)
	}
	gp.waiting = nil
	gp.activeStackChans = false
	if mysg.releasetime &amp;gt; 0 {
		blockevent(mysg.releasetime-t0, 2)
	}
	success := mysg.success
	gp.param = nil
	mysg.c = nil
	releaseSudog(mysg) // 释放等待队列内存
	return true, success
}

&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;channel 发送数据总结&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;判断chan是否初始化，若没有初始化，接收channel数据将阻塞&lt;/li&gt;
&lt;li&gt;检查chan是否为空，是否关闭&lt;/li&gt;
&lt;li&gt;当有发送协程，如果是无缓冲队列，直接从发送方取值,如果是待缓冲的区，就从缓冲区头部获取值，并将发送着的值保存在缓冲区后&lt;/li&gt;
&lt;li&gt;当没有发送协程，但是有缓冲区有元素，直接获取缓冲区头部的值&lt;/li&gt;
&lt;li&gt;当没有发送数据的的协程，且缓冲区值，就将接收的协程放入等待队列中&lt;/li&gt;
&lt;li&gt;当接收协程被唤醒时，解除阻塞状态，释放等待队列内存
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 177; 
			flex-basis: 426px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/go-channel%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/6.png&#34; data-size=&#34;1488x837&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/go-channel%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/6.png&#34;
			width=&#34;1488&#34;
			height=&#34;837&#34;
			srcset=&#34;https://zcj-git520.github.io/p/go-channel%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/6_hudbd79ce6f9ecebda132de055b60a9928_209658_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/go-channel%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/6_hudbd79ce6f9ecebda132de055b60a9928_209658_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;channel-关闭&#34;&gt;channel 关闭&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;close(chan)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chan 关闭源码如下:
    func closechan(c *hchan) {
        // 判断chan是否初始化，没有初始化，关闭没有初始化的chan,直接panic
    	if c == nil {
    		panic(plainError(&amp;quot;close of nil channel&amp;quot;))
    	}
        // 判断chan是否也被关闭，关闭也关闭的chan,也会发送panic
    	lock(&amp;amp;c.lock)
    	if c.closed != 0 {
    		unlock(&amp;amp;c.lock)
    		panic(plainError(&amp;quot;close of closed channel&amp;quot;))
    	}
    
    	if raceenabled {
    		callerpc := getcallerpc()
    		racewritepc(c.raceaddr(), callerpc, funcPC(closechan))
    		racerelease(c.raceaddr())
    	}
    
    	c.closed = 1
    
    	var glist gList
        // 释放所有的接收chan，并将所有的接收队列加入到待清除队列 glist 中
    	// release all readers
    	for {
    		sg := c.recvq.dequeue()
    		if sg == nil {
    			break
    		}
    		if sg.elem != nil {
    			typedmemclr(c.elemtype, sg.elem)
    			sg.elem = nil
    		}
    		if sg.releasetime != 0 {
    			sg.releasetime = cputicks()
    		}
    		gp := sg.g
    		gp.param = unsafe.Pointer(sg)
    		sg.success = false
    		if raceenabled {
    			raceacquireg(gp, c.raceaddr())
    		}
    		glist.push(gp)
    	}
        // 释放所有的发送chan,发送者的等待队列 sendq 中的 sudog 放入待清除队列 glist 中
    	// release all writers (they will panic)
    	for {
    		sg := c.sendq.dequeue()
    		if sg == nil {
    			break
    		}
    		sg.elem = nil
    		if sg.releasetime != 0 {
    			sg.releasetime = cputicks()
    		}
    		gp := sg.g
    		gp.param = unsafe.Pointer(sg)
    		sg.success = false
    		if raceenabled {
    			raceacquireg(gp, c.raceaddr())
    		}
    		glist.push(gp)
    	}
    	unlock(&amp;amp;c.lock)
    最后会为所有被阻塞的 goroutine 调用 goready 触发调度。将所有 glist 中的 
    goroutine 状态从 _Gwaiting 设置为 _Grunnable 状态，等待调度器的调度。
    	// Ready all Gs now that we&#39;ve dropped the channel lock.
    	for !glist.empty() {
    		gp := glist.pop()
    		gp.schedlink = 0
    		goready(gp, 3)
    	}
    }
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;channel 关闭总结&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;判断chan是否初始化，没有初始化，关闭没有初始化的chan,直接panic&lt;/li&gt;
&lt;li&gt;判断chan是否也被关闭，关闭也关闭的chan,也会发送panic&lt;/li&gt;
&lt;li&gt;先释放所有的接收chan，并将所有的接收队列加入到待清除队列 glist 中&lt;/li&gt;
&lt;li&gt;释放所有的发送chan,发送者的等待队列 sendq 中的 sudog 放入待清除队列 glist 中&lt;/li&gt;
&lt;li&gt;最后会为所有被阻塞的 goroutine 调用 goready 触发调度。将所有 glist 中的goroutine 状态从 _Gwaiting 设置为 _Grunnable 状态，等待调度器的调度。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>go error类型转json</title>
        <link>https://zcj-git520.github.io/p/golang/</link>
        <pubDate>Sat, 09 Oct 2021 22:00:38 +0800</pubDate>
        
        <guid>https://zcj-git520.github.io/p/golang/</guid>
        <description>&lt;img src="https://zcj-git520.github.io/p/golang/2.png" alt="Featured image of post go error类型转json" /&gt;&lt;h2 id=&#34;问题&#34;&gt;问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在收集服务的访问记录时，需要将访问记录保存，定义结构体如下&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type accessData struct {
	RemoteAddr string    // 远程访问主机地址
	RequestURI string    //访问的路由
	ServerName string    // 访问的服务名称
	AccessDate string    //访问的时间
	RunStatus bool       //服务是否正常运行
	RunError error       //运行报错：报错信息.
	ServerParam interface{} // 访问服务的参数
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过结构体转json，同时通过get请求得到图下结果
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 135; 
			flex-basis: 325px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/golang/1.png&#34; data-size=&#34;630x464&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/golang/1.png&#34;
			width=&#34;630&#34;
			height=&#34;464&#34;
			srcset=&#34;https://zcj-git520.github.io/p/golang/1_hu0cd8407e48b8e284b5fa50d7a8dedae6_33030_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/golang/1_hu0cd8407e48b8e284b5fa50d7a8dedae6_33030_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;RunError&amp;rdquo;: {},被json转为{}的字符， 打印结构体，发现错误信息是有的：{192.168.1.101:53364 /v1/alarms/out/d GetOutAlarms 2021-10-12 10:09:42 false 没有这个报警🆔id &lt;!-- raw HTML omitted --&gt;},说明是error 转json问题&lt;/p&gt;
&lt;h2 id=&#34;问题分析与解决&#34;&gt;问题分析与解决&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;问题分析查看error类型定义发现：error类型只是一个接口。它可以包含任何实现它的具体类型的值&lt;/li&gt;
&lt;li&gt;解决：将结构体中错误转化为字符串类型，同时用err.Error()返回是错误的字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type accessData struct {
  RemoteAddr string    // 远程访问主机地址
  RequestURI string    //访问的路由
  ServerName string    // 访问的服务名称
  AccessDate string    //访问的时间
  RunStatus bool       //服务是否正常运行
  RunError string       //运行报错：报错信息.
  ServerParam interface{} // 访问服务的参数
  }
  type error interface {
  Error() string
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结果如图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 88; 
			flex-basis: 212px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/golang/2.png&#34; data-size=&#34;492x556&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/golang/2.png&#34;
			width=&#34;492&#34;
			height=&#34;556&#34;
			srcset=&#34;https://zcj-git520.github.io/p/golang/2_hu3607656af67f333528ae9e7b0ed06a62_30106_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/golang/2_hu3607656af67f333528ae9e7b0ed06a62_30106_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>go goroutine与gmp模型的深入理解</title>
        <link>https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</link>
        <pubDate>Wed, 06 Oct 2021 22:00:38 +0800</pubDate>
        
        <guid>https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</guid>
        <description>&lt;img src="https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/1.png" alt="Featured image of post go goroutine与gmp模型的深入理解" /&gt;&lt;h2 id=&#34;go-协程goroutine&#34;&gt;go 协程goroutine&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;协程是用户级的线程，有用户自己调度，使用协程使得程序调度更加灵活。同时比线程更轻量，占用的栈内存更少。go语言天生支持高并发，go使用协程goroutine的调度器。goroutine 的栈内存最小值为2kb(_StackMin = 2048),它不是固定不变的，可以随需求增大和缩小。goroutine 维护着很大的内存，无需频繁开辟内存，goroutine是使用M:n模型，在用户态切换协程，加上创建协程代价低，使得cpu的利用率大大提升，cup的性能大幅度的被利用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;goroutine-调度器gpm模型&#34;&gt;goroutine 调度器GPM模型&lt;/h2&gt;
&lt;h3 id=&#34;g&#34;&gt;G&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;G 就是goroutine协程&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type g struct {
	// Stack parameters.
	// stack describes the actual stack memory: [stack.lo, stack.hi).
	// stackguard0 is the stack pointer compared in the Go stack growth prologue.
	// It is stack.lo+StackGuard normally, but can be StackPreempt to trigger a preemption.
	// stackguard1 is the stack pointer compared in the C stack growth prologue.
	// It is stack.lo+StackGuard on g0 and gsignal stacks.
	// It is ~0 on other goroutine stacks, to trigger a call to morestackc (and crash).
	// 记录该goroutine使用的栈
    stack       stack   // offset known to runtime/cgo
    
	//下面两个成员用于栈溢出检查，实现栈的自动伸缩，抢占调度也会用到stackguard0
    stackguard0 uintptr // offset known to liblink
	stackguard1 uintptr // offset known to liblink

	_panic         *_panic // innermost panic - offset known to liblink
	_defer         *_defer // innermost defer
    
    // 此goroutine正在被哪个工作线程执行
	m              *m      // current m; offset known to arm liblink
    //这个字段跟调度切换有关，G切换时用来保存上下文，保存什么，看下面gobuf结构体
	sched          gobuf
	syscallsp      uintptr        // if status==Gsyscall, syscallsp = sched.sp to use during gc
	syscallpc      uintptr        // if status==Gsyscall, syscallpc = sched.pc to use during gc
	stktopsp       uintptr        // expected sp at top of stack, to check in traceback
	param          unsafe.Pointer // passed parameter on wakeup，wakeup唤醒时传递的参数
	// 状态Gidle,Grunnable,Grunning,Gsyscall,Gwaiting,Gdead
    atomicstatus   uint32
	stackLock      uint32 // sigprof/scang lock; TODO: fold in to atomicstatus
	goid           int64
    
    //schedlink字段指向全局运行队列中的下一个g，
    //所有位于全局运行队列中的g形成一个链表
	schedlink      guintptr
	waitsince      int64      // approx time when the g become blocked
	waitreason     waitReason // if status==Gwaiting，g被阻塞的原因
    //抢占信号，stackguard0 = stackpreempt，如果需要抢占调度，设置preempt为true
	preempt        bool       // preemption signal, duplicates stackguard0 = stackpreempt
	paniconfault   bool       // panic (instead of crash) on unexpected fault address
	preemptscan    bool       // preempted g does scan for gc
	gcscandone     bool       // g has scanned stack; protected by _Gscan bit in status
	gcscanvalid    bool       // false at start of gc cycle, true if G has not run since last scan; TODO: remove?
	throwsplit     bool       // must not split stack
	raceignore     int8       // ignore race detection events
	sysblocktraced bool       // StartTrace has emitted EvGoInSyscall about this goroutine
	sysexitticks   int64      // cputicks when syscall has returned (for tracing)
	traceseq       uint64     // trace event sequencer
	tracelastp     puintptr   // last P emitted an event for this goroutine
	// 如果调用了 LockOsThread，那么这个 g 会绑定到某个 m 上
    lockedm        muintptr
	sig            uint32
	writebuf       []byte
	sigcode0       uintptr
	sigcode1       uintptr
	sigpc          uintptr
    // 创建这个goroutine的go表达式的pc
	gopc           uintptr         // pc of go statement that created this goroutine
	ancestors      *[]ancestorInfo // ancestor information goroutine(s) that created this goroutine (only used if debug.tracebackancestors)
	startpc        uintptr         // pc of goroutine function
	racectx        uintptr
	waiting        *sudog         // sudog structures this g is waiting on (that have a valid elem ptr); in lock order
	cgoCtxt        []uintptr      // cgo traceback context
	labels         unsafe.Pointer // profiler labels
	timer          *timer         // cached timer for time.Sleep,为 time.Sleep 缓存的计时器
	selectDone     uint32         // are we participating in a select and did someone win the race?

	// Per-G GC state

	// gcAssistBytes is this G&#39;s GC assist credit in terms of
	// bytes allocated. If this is positive, then the G has credit
	// to allocate gcAssistBytes bytes without assisting. If this
	// is negative, then the G must correct this by performing
	// scan work. We track this in bytes to make it fast to update
	// and check for debt in the malloc hot path. The assist ratio
	// determines how this corresponds to scan work debt.
	gcAssistBytes int64
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;保存着goroutine所有信息以及栈信息，gobuf结构体：cpu里的寄存器信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;p-processor处理器&#34;&gt;P processor处理器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;调度协程G和线程M的关联&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;P 的结构体如下：
type p struct {
    //allp中的索引
	id          int32
    //p的状态
	status      uint32 // one of pidle/prunning/...
	link        puintptr
	schedtick   uint32     // incremented on every scheduler call-&amp;gt;每次scheduler调用+1
	syscalltick uint32     // incremented on every system call-&amp;gt;每次系统调用+1
	sysmontick  sysmontick // last tick observed by sysmon
    //指向绑定的 m，如果 p 是 idle 的话，那这个指针是 nil
	m           muintptr   // back-link to associated m (nil if idle)
	mcache      *mcache
	raceprocctx uintptr

    //不同大小可用defer结构池
	deferpool    [5][]*_defer // pool of available defer structs of different sizes (see panic.go)
	deferpoolbuf [5][32]*_defer

	// Cache of goroutine ids, amortizes accesses to runtime·sched.goidgen.
	goidcache    uint64
	goidcacheend uint64

    //本地运行队列，可以无锁访问
	// Queue of runnable goroutines. Accessed without lock.
	runqhead uint32  //队列头
	runqtail uint32   //队列尾
    //数组实现的循环队列
	runq     [256]guintptr
    
	// runnext, if non-nil, is a runnable G that was ready&#39;d by
	// the current G and should be run next instead of what&#39;s in
	// runq if there&#39;s time remaining in the running G&#39;s time
	// slice. It will inherit the time left in the current time
	// slice. If a set of goroutines is locked in a
	// communicate-and-wait pattern, this schedules that set as a
	// unit and eliminates the (potentially large) scheduling
	// latency that otherwise arises from adding the ready&#39;d
	// goroutines to the end of the run queue.
    // runnext 非空时，代表的是一个 runnable 状态的 G，
    //这个 G 被 当前 G 修改为 ready 状态，相比 runq 中的 G 有更高的优先级。
    //如果当前 G 还有剩余的可用时间，那么就应该运行这个 G
    //运行之后，该 G 会继承当前 G 的剩余时间
	runnext guintptr

	// Available G&#39;s (status == Gdead)
    //空闲的g
	gFree struct {
		gList
		n int32
	}

	sudogcache []*sudog
	sudogbuf   [128]*sudog

	tracebuf traceBufPtr

	// traceSweep indicates the sweep events should be traced.
	// This is used to defer the sweep start event until a span
	// has actually been swept.
	traceSweep bool
	// traceSwept and traceReclaimed track the number of bytes
	// swept and reclaimed by sweeping in the current sweep loop.
	traceSwept, traceReclaimed uintptr

	palloc persistentAlloc // per-P to avoid mutex

	_ uint32 // Alignment for atomic fields below

	// Per-P GC state
	gcAssistTime         int64    // Nanoseconds in assistAlloc
	gcFractionalMarkTime int64    // Nanoseconds in fractional mark worker (atomic)
	gcBgMarkWorker       guintptr // (atomic)
	gcMarkWorkerMode     gcMarkWorkerMode

	// gcMarkWorkerStartTime is the nanotime() at which this mark
	// worker started.
	gcMarkWorkerStartTime int64

	// gcw is this P&#39;s GC work buffer cache. The work buffer is
	// filled by write barriers, drained by mutator assists, and
	// disposed on certain GC state transitions.
	gcw gcWork

	// wbBuf is this P&#39;s GC write barrier buffer.
	//
	// TODO: Consider caching this in the running G.
	wbBuf wbBuf

	runSafePointFn uint32 // if 1, run sched.safePointFn at next safe point

	pad cpu.CacheLinePad
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;记录着P的信息，以及G的状态等。同时P是有着本地队列，存放着带待运行的G,本地队列不能超过256个。&lt;/li&gt;
&lt;li&gt;P的数量：是由环境变量 $GOMAXPROCS 或者是由 runtime 的方法 GOMAXPROCS() 决定。在程序启动式创建，并保存在数组中，最多有 GOMAXPROCS(可配置) 个&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;m-是内核态线程的抽象&#34;&gt;M 是内核态线程的抽象&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;主要的工作执行协程G或者在调度G到P中&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;M的结构体如下：
type m struct {
    // 系统管理的一个g，执行调度代码时使用的。比如执行用户的goroutine时，就需要把把用户
    // 的栈信息换到内核线程的栈，以便能够执行用户goroutine
	g0      *g     // goroutine with scheduling stack
	morebuf gobuf  // gobuf arg to morestack
	divmod  uint32 // div/mod denominator for arm - known to liblink

	// Fields not known to debuggers.
	procid        uint64       // for debuggers, but offset not hard-coded
    //处理signal的 g
	gsignal       *g           // signal-handling g
	goSigStack    gsignalStack // Go-allocated signal handling stack
	sigmask       sigset       // storage for saved signal mask
    //线程的本地存储TLS，这里就是为什么OS线程能运行M关键地方
	tls           [6]uintptr   // thread-local storage (for x86 extern register)
	//go 关键字运行的函数
    mstartfn      func()
    //当前运行的用户goroutine的g结构体对象
	curg          *g       // current running goroutine
	caughtsig     guintptr // goroutine running during fatal signal
    
    //当前工作线程绑定的P，如果没有就为nil
	p             puintptr // attached p for executing go code (nil if not executing go code)
	//暂存与当前M潜在关联的P
    nextp         puintptr
    //M之前调用的P
	oldp          puintptr // the p that was attached before executing a syscall
	id            int64
	mallocing     int32
	throwing      int32
    //当前M是否关闭抢占式调度
	preemptoff    string // if != &amp;quot;&amp;quot;, keep curg running on this m
	locks         int32
	dying         int32
	profilehz     int32
    //M的自旋状态，为true时M处于自旋状态，正在从其他线程偷G; 为false，休眠状态
	spinning      bool // m is out of work and is actively looking for work
	blocked       bool // m is blocked on a note
	newSigstack   bool // minit on C thread called sigaltstack
	printlock     int8
	incgo         bool   // m is executing a cgo call
	freeWait      uint32 // if == 0, safe to free g0 and delete m (atomic)
	fastrand      [2]uint32
	needextram    bool
	traceback     uint8
	ncgocall      uint64      // number of cgo calls in total
	ncgo          int32       // number of cgo calls currently in progress
	cgoCallersUse uint32      // if non-zero, cgoCallers in use temporarily
	cgoCallers    *cgoCallers // cgo traceback if crashing in cgo call
	//没有goroutine运行时，工作线程睡眠
    //通过这个来唤醒工作线程
    park          note // 休眠锁
    //记录所有工作线程的链表
	alllink       *m // on allm
	schedlink     muintptr
    //当前线程内存分配的本地缓存
	mcache        *mcache
    //当前M锁定的G，
	lockedg       guintptr
	createstack   [32]uintptr // stack that created this thread.
	lockedExt     uint32      // tracking for external LockOSThread
	lockedInt     uint32      // tracking for internal lockOSThread
	nextwaitm     muintptr    // next m waiting for lock
	waitunlockf   func(*g, unsafe.Pointer) bool
	waitlock      unsafe.Pointer
	waittraceev   byte
	waittraceskip int
	startingtrace bool
	syscalltick   uint32
    //操作系统线程id
	thread        uintptr // thread handle
	freelink      *m      // on sched.freem

	// these are here because they are too large to be on the stack
	// of low-level NOSPLIT functions.
	libcall   libcall
	libcallpc uintptr // for cpu profiler
	libcallsp uintptr
	libcallg  guintptr
	syscall   libcall // stores syscall parameters on windows

	vdsoSP uintptr // SP for traceback while in VDSO call (0 if not in call)
	vdsoPC uintptr // PC for traceback while in VDSO call

	dlogPerM

	mOS
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;记录着M的线程的信息，包括一些P,G以及信号和自旋锁等信息&lt;/li&gt;
&lt;li&gt;m 数量：可以通过SetMaxThreads函数，设置 M 的最大数量，默认为10000(sched.maxmcount = 10000)，和P一样在程序启动时创建。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;全局队列gqueue&#34;&gt;全局队列（gQueue）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;P的本地队列可以存放着不超过256个待执行的G,P是有限的，当G过多时，即当P本地队列存放不下时，就需要将G存放在全局队列中。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;全局队列结构如下：
type gQueue struct {
	head guintptr //队列头
	tail guintptr //队列尾
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;gpmgqueue关系&#34;&gt;G、P、M、gQueue关系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;P与M没有数量关系，当一个M处于阻塞时，P先找空闲M,没有空闲的M就创建新的M&lt;/li&gt;
&lt;li&gt;G优先存放在P本地队列中，当P中G满时，会将P中前一半G存放在全局中。当P空闲时时，会从全局中拿取G放在本地队列。全局没有G时，会从其P的本地队列中拿取一半到本地队列。&lt;/li&gt;
&lt;li&gt;关系如图所示：&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 90; 
			flex-basis: 218px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/1.png&#34; data-size=&#34;662x728&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/1.png&#34;
			width=&#34;662&#34;
			height=&#34;728&#34;
			srcset=&#34;https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/1_huda718813a1636432ee91da972c85e460_240629_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/1_huda718813a1636432ee91da972c85e460_240629_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;创建goroutine&#34;&gt;创建goroutine&lt;/h2&gt;
&lt;h3 id=&#34;newproc函数&#34;&gt;newproc()函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;goroutine 是由函数newproc函数进行创建的，newproc源码如下&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 参数：协程函数的参数占的字节数和协程入口函数的funcval指针
func newproc(siz int32, fn *funcval) {
    // 获得协程参数的地址= fn函数地址+偏移值
	argp := add(unsafe.Pointer(&amp;amp;fn), sys.PtrSize)
	gp := getg() // 获得当前G的指针
    //调用者的pc，也就是执行完此函数返回调用者时的下一条指令地址
	pc := getcallerpc() 
    // 切换到（系统栈）g0栈中
	systemstack(func() {
    //执行调用newproc1()函数执行创建协程
		newg := newproc1(fn, argp, siz, gp, pc)
		_p_ := getg().m.p.ptr()
        // 把当前的G存放在runq队列中
		runqput(_p_, newg, true) 
        // 如果当前由空闲的P,没有睡眠的M,主协程开始运行时
		if mainStarted {
			wakep() // 创建m,并设置为活跃状态
		}
	})
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;在newproc函数中为什么要切换在g0栈中执行呢？是因为newproc1()函数不支持栈增长，协程的栈空间小(几KB)，为了防止运行协程函数时栈溢出，需要在g0的栈上运行，g0是分配在线程的栈空间(4MB)上。g0的栈空间很大，运行协程函数时栈不溢出。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;newproc1函数&#34;&gt;newproc1()函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;newproc1()是创建协程 源码如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;参数：协程入口、参数首地址、参数大小、父协程指针、返回地址
func newproc1(fn *funcval, argp unsafe.Pointer, narg int32, callergp *g, callerpc uintptr) *g {
	_g_ := getg()  // 获得当前的G

	if fn == nil {
		_g_.m.throwing = -1 // do not dump full stacks
		throw(&amp;quot;go of nil func value&amp;quot;)
	}
     // 为了保证数据一致性会禁止当前m被抢占
	acquirem() // disable preemption because it can be holding p in a local var
	siz := narg
	siz = (siz + 7) &amp;amp;^ 7

	// We could allocate a larger initial stack if necessary.
	// Not worth it: this is almost always an error.
	// 4*sizeof(uintreg): extra space added below
	// sizeof(uintreg): caller&#39;s LR (arm) or return address (x86, in gostartcall).
	if siz &amp;gt;= _StackMin-4*sys.RegSize-sys.RegSize {
		throw(&amp;quot;newproc: function arguments too large for new goroutine&amp;quot;)
	}

	_p_ := _g_.m.p.ptr()
    // 尝试获取一个空闲的G,如果没有空闲的G,就会创建新的G,分配栈空间,并添加到全局allgs中
	newg := gfget(_p_)
    // 如果没有空闲的G
	if newg == nil {
    // 就会创建新的G,分配栈空间大小为最小的2KB
		newg = malg(_StackMin)
        // 设置状态为等待
		casgstatus(newg, _Gidle, _Gdead)
        //并添加到全局allgs中
		allgadd(newg) // publishes with a g-&amp;gt;status of Gdead so GC scanner doesn&#39;t look at uninitialized stack.
	}
	if newg.stack.hi == 0 {
		throw(&amp;quot;newproc1: newg missing stack&amp;quot;)
	}

	if readgstatus(newg) != _Gdead {
		throw(&amp;quot;newproc1: new g is not Gdead&amp;quot;)
	}

	totalSize := 4*sys.RegSize + uintptr(siz) + sys.MinFrameSize // extra space in case of reads slightly beyond frame
	totalSize += -totalSize &amp;amp; (sys.SpAlign - 1)                  // align to spAlign
	sp := newg.stack.hi - totalSize
	spArg := sp
	if usesLR {
		// caller&#39;s LR
		*(*uintptr)(unsafe.Pointer(sp)) = 0
		prepGoExitFrame(sp)
		spArg += sys.MinFrameSize
	}
	if narg &amp;gt; 0 {
        // 如果协程入口函数由参数，会将参数移动在协程栈中 
		memmove(unsafe.Pointer(spArg), argp, uintptr(narg))
		// This is a stack-to-stack copy. If write barriers
		// are enabled and the source stack is grey (the
		// destination is always black), then perform a
		// barrier copy. We do this *after* the memmove
		// because the destination stack may have garbage on
		// it.
		if writeBarrier.needed &amp;amp;&amp;amp; !_g_.m.curg.gcscandone {
			f := findfunc(fn.fn)
			stkmap := (*stackmap)(funcdata(f, _FUNCDATA_ArgsPointerMaps))
			if stkmap.nbit &amp;gt; 0 {
				// We&#39;re in the prologue, so it&#39;s always stack map index 0.
				bv := stackmapdata(stkmap, 0)
				bulkBarrierBitmap(spArg, spArg, uintptr(bv.n)*sys.PtrSize, 0, bv.bytedata)
			}
		}
	}
    // 初始化newg.sched调度相关的信息
	memclrNoHeapPointers(unsafe.Pointer(&amp;amp;newg.sched), unsafe.Sizeof(newg.sched))
	newg.sched.sp = sp //设置为协程栈指针
	newg.stktopsp = sp
    // 设置为指向协程入口函数的入口，当协程调度执行时，运行协程函数
	newg.sched.pc = funcPC(goexit) + sys.PCQuantum // +PCQuantum so that previous instruction is in same function
	newg.sched.g = guintptr(unsafe.Pointer(newg))
	gostartcallfn(&amp;amp;newg.sched, fn)
    // 设置为父协程调用newproc函数结束后的返回地址
	newg.gopc = callerpc
	newg.ancestors = saveAncestors(callergp)
    // 设置startpc为协程入孔函数的起始地址
	newg.startpc = fn.fn 
	if _g_.m.curg != nil {
		newg.labels = _g_.m.curg.labels
	}
	if isSystemGoroutine(newg, false) {
		atomic.Xadd(&amp;amp;sched.ngsys, +1)
	}
    // 设置协程为运行状态
	casgstatus(newg, _Gdead, _Grunnable)

	if _p_.goidcache == _p_.goidcacheend {
		// Sched.goidgen is the last allocated id,
		// this batch must be [sched.goidgen+1, sched.goidgen+GoidCacheBatch].
		// At startup sched.goidgen=0, so main goroutine receives goid=1.
		_p_.goidcache = atomic.Xadd64(&amp;amp;sched.goidgen, _GoidCacheBatch)
		_p_.goidcache -= _GoidCacheBatch - 1
		_p_.goidcacheend = _p_.goidcache + _GoidCacheBatch
	}
    // 给协程赋予一个唯一的goid
	newg.goid = int64(_p_.goidcache)
	_p_.goidcache++
	if raceenabled {
		newg.racectx = racegostart(callerpc)
	}
	if trace.enabled {
		traceGoCreate(newg, newg.startpc)
	}
    // 允许当前m被抢占
	releasem(_g_.m)

	return newg
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;图示如下&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 214; 
			flex-basis: 514px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/2.png&#34; data-size=&#34;1903x887&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/2.png&#34;
			width=&#34;1903&#34;
			height=&#34;887&#34;
			srcset=&#34;https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/2_hu005dba7d92ca61057a969757b05a2c3b_575926_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/2_hu005dba7d92ca61057a969757b05a2c3b_575926_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总结goroutine创建过程&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;为了保证数据一致性会禁止当前m被抢占&lt;/li&gt;
&lt;li&gt;尝试获取一个空闲的G,如果没有空闲的G,就会创建新的G,分配栈空间,状态为等待并添加到全局allgs中&lt;/li&gt;
&lt;li&gt;如果协程入口函数由参数，会将参数移动在协程栈中&lt;/li&gt;
&lt;li&gt;初始化newg.sched调度相关的信息，设置状态运行&lt;/li&gt;
&lt;li&gt;得到唯一的goid, 并添加到runq队列中&lt;/li&gt;
&lt;li&gt;如果当前有空闲的P,没有睡眠的M,并且主协程开始运行时，就会创建新的活跃的M&lt;/li&gt;
&lt;li&gt;当g运行结束后，设置允许当前m被抢占&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;goroutine的让出与恢复调度抢占监控&#34;&gt;goroutine的让出与恢复、调度、抢占、监控&lt;/h2&gt;
&lt;h3 id=&#34;goroutine-让出与恢复&#34;&gt;goroutine 让出与恢复&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;协程的让出是由函数gopark()执行的&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;源码如下：
func gopark(unlockf func(*g, unsafe.Pointer) bool, lock unsafe.Pointer, reason waitReason, traceEv byte, traceskip int) {
	if reason != waitReasonSleep {
		checkTimeouts() // timeouts may expire while two goroutines keep the scheduler busy
	}
    // 禁止当前m被抢占
	mp := acquirem()
	gp := mp.curg
	status := readgstatus(gp)
    // 判断协程的是否在运行状态
	if status != _Grunning &amp;amp;&amp;amp; status != _Gscanrunning {
		throw(&amp;quot;gopark: bad g status&amp;quot;)
	}
	mp.waitlock = lock
	mp.waitunlockf = unlockf
	gp.waitreason = reason
	mp.waittraceev = traceEv
	mp.waittraceskip = traceskip
    // 解除对m的抢占
	releasem(mp)
	// can&#39;t do anything that might move the G between Ms here.
    // 不能做任何可能在 Ms 之间移动 G 的事情。
    // 保存协程，切换在go
	mcall(park_m)
}
func park_m(gp *g) {
	_g_ := getg()

	if trace.enabled {
		traceGoPark(_g_.m.waittraceev, _g_.m.waittraceskip)
	}
    //更改协程由运行状态到等待状态
	casgstatus(gp, _Grunning, _Gwaiting)
	dropg()
    &amp;quot;&amp;quot;&amp;quot;
    func dropg() {
    	_g_ := getg()
        // 把m当前执行的置为nil(m不在运行这个当前写协程，协程就挂起了)
    	setMNoWB(&amp;amp;_g_.m.curg.m, nil)
    	setGNoWB(&amp;amp;_g_.m.curg, nil)
    }
    &amp;quot;&amp;quot;&amp;quot;

	if fn := _g_.m.waitunlockf; fn != nil {
		ok := fn(gp, _g_.m.waitlock)
		_g_.m.waitunlockf = nil
		_g_.m.waitlock = nil
		if !ok {
			if trace.enabled {
				traceGoUnpark(gp, 2)
			}
			casgstatus(gp, _Gwaiting, _Grunnable)
			execute(gp, true) // Schedule it back, never returns.
		}
	}
	schedule() // 寻找下一个G
}
//在G中由定时调用回调函数f 
type timer struct {
	// If this timer is on a heap, which P&#39;s heap it is on.
	// puintptr rather than *p to match uintptr in the versions
	// of this struct defined in other packages.
	pp puintptr

	// Timer wakes up at when, and then at when+period, ... (period &amp;gt; 0 only)
	// each time calling f(arg, now) in the timer goroutine, so f must be
	// a well-behaved function and not block.
	//
	// when must be positive on an active timer.
	when   int64
	period int64
	f      func(interface{}, uintptr)
	arg    interface{}
	seq    uintptr

	// What to set the when field to in timerModifiedXX status.
	nextwhen int64

	// The status field holds one of the values below.
	status uint32
}
// Mark gp ready to run.
// 将等待协程状态置为运行的状态
func ready(gp *g, traceskip int, next bool) {
	if trace.enabled {
		traceGoUnpark(gp, traceskip)
	}

	status := readgstatus(gp)

	// Mark runnable.
	_g_ := getg()
    //// 禁止当前m被抢占
	mp := acquirem() // disable preemption because it can be holding p in a local var
	if status&amp;amp;^_Gscan != _Gwaiting {
		dumpgstatus(gp)
		throw(&amp;quot;bad g-&amp;gt;status in ready&amp;quot;)
	}

	// status is Gwaiting or Gscanwaiting, make Grunnable and put on runq
	casgstatus(gp, _Gwaiting, _Grunnable) // 把协程等待的转态置为可运行状态
	runqput(_g_.m.p.ptr(), gp, next)  // 添加在运行队列中
	wakep()// 如果没有可执行的M,就创建新的m
	releasem(mp)  // 释放当前的m
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如图所示  &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 93; 
			flex-basis: 224px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/4.png&#34; data-size=&#34;616x659&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/4.png&#34;
			width=&#34;616&#34;
			height=&#34;659&#34;
			srcset=&#34;https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/4_hu5613a8da5b016601d36fb944722fdf94_151142_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/4_hu5613a8da5b016601d36fb944722fdf94_151142_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总结&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;gopark()是让出函数，禁止当前m被抢占，判断当前的协程状态是否为运行状态。&lt;/li&gt;
&lt;li&gt;dropg()让当前的m不在执行当前的G,修改当前g的状态为等待(协程挂起)，调用schedule() 寻找下一个可执行G&lt;/li&gt;
&lt;li&gt;timers 等待的g中数据结构，定时调用回调函数f，将g置为了运行状态&lt;/li&gt;
&lt;li&gt;ready()函数是将唤醒等待G,将G的状态更改为可运行状态，并添加在运行的队列中m，如果没有可执行的M,就创建新的m&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;goroutine-监控&#34;&gt;goroutine 监控&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用checkTimers()检查到时间运行的唤醒g&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;源码如下
checkTimers(pp *p, now int64) (rnow, pollUntil int64, ran bool) {
  	// If it&#39;s not yet time for the first timer, or the first adjusted
  	// timer, then there is nothing to do.
  	next := int64(atomic.Load64(&amp;amp;pp.timer0When))
  	nextAdj := int64(atomic.Load64(&amp;amp;pp.timerModifiedEarliest))
  	if next == 0 || (nextAdj != 0 &amp;amp;&amp;amp; nextAdj &amp;lt; next) {
  		next = nextAdj
  	}
  
  	if next == 0 {
  		// No timers to run or adjust.
  		return now, 0, false
  	}
  
  	if now == 0 {
  		now = nanotime()
  	}
  	if now &amp;lt; next {
  		// Next timer is not ready to run, but keep going
  		// if we would clear deleted timers.
  		// This corresponds to the condition below where
  		// we decide whether to call clearDeletedTimers.
  		if pp != getg().m.p.ptr() || int(atomic.Load(&amp;amp;pp.deletedTimers)) &amp;lt;= int(atomic.Load(&amp;amp;pp.numTimers)/4) {
  			return now, next, false
  		}
  	}
  
  	lock(&amp;amp;pp.timersLock)
  
  	if len(pp.timers) &amp;gt; 0 {
  		adjusttimers(pp, now)
  		for len(pp.timers) &amp;gt; 0 {
  			// Note that runtimer may temporarily unlock
  			// pp.timersLock.
  			if tw := runtimer(pp, now); tw != 0 {
  				if tw &amp;gt; 0 {
  					pollUntil = tw
  				}
  				break
  			}
  			ran = true
  		}
  	}
  
  	// If this is the local P, and there are a lot of deleted timers,
  	// clear them out. We only do this for the local P to reduce
  	// lock contention on timersLock.
  	if pp == getg().m.p.ptr() &amp;amp;&amp;amp; int(atomic.Load(&amp;amp;pp.deletedTimers)) &amp;gt; len(pp.timers)/4 {
  		clearDeletedTimers(pp)
  	}
  
  	unlock(&amp;amp;pp.timersLock)
  
  	return now, pollUntil, ran
  }
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;协程的监控是由专门的监控协程程来运行，监控协程是由主协程创建而来
，监控协程与gpm中的协程不一样，它不是由gpm进行调度，当然了也不需要P,
监控timer，并按需调整g的休眠时间，如果没有可执行的M,就创建新的m执行被唤醒的G,
确保被唤醒g被执行。
如图  &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 153; 
			flex-basis: 368px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/5.png&#34; data-size=&#34;1256x819&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/5.png&#34;
			width=&#34;1256&#34;
			height=&#34;819&#34;
			srcset=&#34;https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/5_hu682cbf00a0aebc2341d65e28e3999df2_184463_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/5_hu682cbf00a0aebc2341d65e28e3999df2_184463_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;goroutine-抢占&#34;&gt;goroutine 抢占&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;对运行过长的g进行抢占，即当g运行时间超过运行阈值的g强制让出m
运行时间是由P的结构syscalltick、schedtick、timer0When等记录。&lt;/li&gt;
&lt;li&gt;通过栈增长时：当stackguard = stackPreempt,不执行栈增长，而是执行协程调度,
这样就让协程让出栈。&lt;/li&gt;
&lt;li&gt;这种抢占依赖栈增长，有缺陷。所以有asyncPreempt通过信号方式进行异步抢占&lt;br&gt;
如图所示  &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 135; 
			flex-basis: 325px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/6.png&#34; data-size=&#34;1157x853&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/6.png&#34;
			width=&#34;1157&#34;
			height=&#34;853&#34;
			srcset=&#34;https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/6_huc14b31ec4abc9db0f402c5310d9f9d21_373269_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/6_huc14b31ec4abc9db0f402c5310d9f9d21_373269_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;goroutine-调度&#34;&gt;goroutine 调度&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;调用schedule()函数进行协程的调度&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;源码如下：
func schedule() {
	_g_ := getg() // 获得当前的G

	if _g_.m.locks != 0 {
		throw(&amp;quot;schedule: holding locks&amp;quot;)
	}
    // 判断当前的M和当前的G是否绑定
	if _g_.m.lockedg != 0 {
        // 如果当前的M绑定G,就阻塞m(休眠M)
		stoplockedm()
		execute(_g_.m.lockedg.ptr(), false) // Never returns.
	}

	// We should not schedule away from a g that is executing a cgo call,
	// since the cgo call is using the m&#39;s g0 stack.
	if _g_.m.incgo {
		throw(&amp;quot;schedule: in cgo&amp;quot;)
	}

top:
	pp := _g_.m.p.ptr()
	pp.preempt = false
    // 判断Gc是否在等待执行
	if sched.gcwaiting != 0 {
        //是在等待执行，先执行gc，执行完在执行后续操作
		gcstopm() 
		goto top
	}
	if pp.runSafePointFn != 0 {
		runSafePointFn()
	}

	// Sanity check: if we are spinning, the run queue should be empty.
	// Check this before calling checkTimers, as that might call
	// goready to put a ready goroutine on the local run queue.
	if _g_.m.spinning &amp;amp;&amp;amp; (pp.runnext != 0 || pp.runqhead != pp.runqtail) {
		throw(&amp;quot;schedule: spinning with local work&amp;quot;)
	}
    //检查是否有要被执行的Timer
	checkTimers(pp, 0)

	var gp *g
	var inheritTime bool

	// Normal goroutines will check for need to wakeP in ready,
	// but GCworkers and tracereaders will not, so the check must
	// be done here instead.
    // 普通的 goroutine 会检查是否需要在准备好时唤醒， 
    // 但 GCworkers 和跟踪读取器不会，所以检查必须 
    // 在这里完成。
	tryWakeP := false
	if trace.enabled || trace.shutdown {
		gp = traceReader()
		if gp != nil {
			casgstatus(gp, _Gwaiting, _Grunnable)
			traceGoUnpark(gp, 0)
			tryWakeP = true
		}
	}
	if gp == nil &amp;amp;&amp;amp; gcBlackenEnabled != 0 {
		gp = gcController.findRunnableGCWorker(_g_.m.p.ptr())
		tryWakeP = tryWakeP || gp != nil
	}
	if gp == nil {
		// Check the global runnable queue once in a while to ensure fairness.
		// Otherwise two goroutines can completely occupy the local runqueue
		// by constantly respawning each other.
        / 每隔一段时间检查一下全局可运行队列以确保公平。 
        // 否则两个 goroutine 可以完全占用本地运行队列
        // 通过不断相互重生。
        // 有%61的概率把G从全局运行队列中搬移到本地可运行队列，保障本地可运行队列
            有G运行，全局队列也能放在本都队列中
		if _g_.m.p.ptr().schedtick%61 == 0 &amp;amp;&amp;amp; sched.runqsize &amp;gt; 0 {
			lock(&amp;amp;sched.lock)
			gp = globrunqget(_g_.m.p.ptr(), 1)
			unlock(&amp;amp;sched.lock)
		}
	}
	if gp == nil {
        // 没有待运行的G 就现在本地可运行队列查找
		gp, inheritTime = runqget(_g_.m.p.ptr())
		// We can see gp != nil here even if the M is spinning,
		// if checkTimers added a local goroutine via goready.
	}
	if gp == nil {
        // 本地队列没有，就调用findrunnable()，直到有待执行的g才返回(先在本地
            运行队列，全局队列、等待的io, 其他的P)
		gp, inheritTime = findrunnable() // blocks until work is available
	}

	// This thread is going to run a goroutine and is not spinning anymore,
	// so if it was marked as spinning we need to reset it now and potentially
	// start a new spinning M.
	if _g_.m.spinning {
		resetspinning()
	}

	if sched.disable.user &amp;amp;&amp;amp; !schedEnabled(gp) {
		// Scheduling of this goroutine is disabled. Put it on
		// the list of pending runnable goroutines for when we
		// re-enable user scheduling and look again.
		lock(&amp;amp;sched.lock)
		if schedEnabled(gp) {
			// Something re-enabled scheduling while we
			// were acquiring the lock.
			unlock(&amp;amp;sched.lock)
		} else {
			sched.disable.runnable.pushBack(gp)
			sched.disable.n++
			unlock(&amp;amp;sched.lock)
			goto top
		}
	}

	// If about to schedule a not-normal goroutine (a GCworker or tracereader),
	// wake a P if there is one.
	if tryWakeP {
		wakep()
	}
    // 判断获得的G有没有绑定的M,有就阻塞g, 再次进行调度
	if gp.lockedm != 0 {
		// Hands off own p to the locked m,
		// then blocks waiting for a new p.
		startlockedm(gp)
		goto top
	}
    // 使用execute函数让m执行g
	execute(gp, inheritTime)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如图所示  &lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 103; 
			flex-basis: 248px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/7.png&#34; data-size=&#34;896x865&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/7.png&#34;
			width=&#34;896&#34;
			height=&#34;865&#34;
			srcset=&#34;https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/7_huebf4099418eefb5d5e40ab8835dd1ae1_193577_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/7_huebf4099418eefb5d5e40ab8835dd1ae1_193577_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总结&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;判断当前的M和当前的G是否绑定，如果当前的M绑定G,就阻塞m(休眠M)&lt;/li&gt;
&lt;li&gt;判断Gc是否在等待执行，是在等待执行，先执行gc，执行完在执行后续操作&lt;/li&gt;
&lt;li&gt;检查是否有要被执行的Timer&lt;/li&gt;
&lt;li&gt;普通的 goroutine 会检查是否需要在准备好时唤醒，但 GCworkers 和跟踪读取器不会，所以检查必须&lt;/li&gt;
&lt;li&gt;有%61的概率把G从全局运行队列中搬移到本地可运行队列，保障本地可运行队列有G运行，全局队列也能放在本都队列中&lt;/li&gt;
&lt;li&gt;没有待运行的G就现在本地可运行队列查找，本地队列没有，就调用findrunnable()，直到有待执行的g才返回(先在本地
运行队列，全局队列、等待的io, 其他的P中分配G)&lt;/li&gt;
&lt;li&gt;判断获得的G有没有绑定的M,有就阻塞g, 再次进行调度&lt;/li&gt;
&lt;li&gt;使用execute函数让m执行g,待运行g绑定m,调用gogo(&amp;amp;gp.sched)协程的现场恢复等&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;调度器的设计策略&#34;&gt;调度器的设计策略&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;减少线程的创建与销毁cup的开销，GPM是线程的复用。即当没有 可运行的G时，将M休眠,P空闲。当有可执行G是找空闲的P，在将M唤醒，执行G，直到 main.main 退出，runtime.main 执行 Defer 和 Panic 处理，或调用 runtime.exit 退出程序&lt;/li&gt;
&lt;li&gt;work stealing 机制：当本线程无可运行的 G 时，尝试从其他线程绑定的 P 偷取 G，而不是销毁线程。&lt;/li&gt;
&lt;li&gt;hand off 机制：&lt;br&gt;
1.当本线程因为 G 进行系统调用阻塞时，线程释放绑定的 P，把 P 转移给其他空闲的线程执行。&lt;br&gt;
2.利用并行：GOMAXPROCS 设置 P 的数量，最多有 GOMAXPROCS 个线程分布在多个 CPU 上同时运行。GOMAXPROCS 也限制了并发的程度，比如 GOMAXPROCS = 核数/2，则最多利用了一半的 CPU 核进行并行。 &lt;br&gt;
3.抢占：在 coroutine 中要等待一个协程主动让出 CPU 才执行下一个协程，在 Go 中，一个 goroutine 最多占用 CPU 10ms，防止其他 goroutine 被饿死，这就是 goroutine 不同于 coroutine 的一个地方。&lt;br&gt;
4.全局 G 队列：在新的调度器中依然有全局 G 队列，但功能已经被弱化了，当 M 执行 work stealing 从其他 P 偷不到 G 时，它可以从全局 G 队列获取 G。&lt;/li&gt;
&lt;li&gt;调度如图所示&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 179; 
			flex-basis: 431px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/3.png&#34; data-size=&#34;970x540&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/3.png&#34;
			width=&#34;970&#34;
			height=&#34;540&#34;
			srcset=&#34;https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/3_hu6b3ed4c0e6c5dd3549ade2aca3a75bc3_223170_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/go-goroutine%E4%B8%8Egmp%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/3_hu6b3ed4c0e6c5dd3549ade2aca3a75bc3_223170_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;p&gt;1、&lt;a class=&#34;link&#34; href=&#34;https://www.jianshu.com/p/fa696563c38a&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.jianshu.com/p/fa696563c38a&lt;/a&gt;
2.&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/people/kylin-lab&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zhihu.com/people/kylin-lab&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>进程、线程、协程</title>
        <link>https://zcj-git520.github.io/p/c/c-/</link>
        <pubDate>Tue, 28 Sep 2021 22:00:38 +0800</pubDate>
        
        <guid>https://zcj-git520.github.io/p/c/c-/</guid>
        <description>&lt;img src="https://zcj-git520.github.io/p/c/c/10.png" alt="Featured image of post 进程、线程、协程" /&gt;&lt;h2 id=&#34;理解进程与线程&#34;&gt;理解进程与线程&lt;/h2&gt;
&lt;h3 id=&#34;进程&#34;&gt;进程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;进程是程序一次动态执行过程、进程是操作系统分配资源(内存、io资源、cpu等)和资源调度的基本单位。程序是指令、数据及其组织形式的描述，进程是程序的实体。&lt;/li&gt;
&lt;li&gt;进程是由 进程控制块PCB、相关程序段和该程序段进行操作的数据结构集三个部分组成。&lt;/li&gt;
&lt;li&gt;进程的五中状态：创建、就绪、运行、阻塞、终止&lt;/li&gt;
&lt;li&gt;五种状态转换如图所示：
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 396; 
			flex-basis: 950px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/c/c/1.png&#34; data-size=&#34;697x176&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/c/c/1.png&#34;
			width=&#34;697&#34;
			height=&#34;176&#34;
			srcset=&#34;https://zcj-git520.github.io/p/c/c/1_hu867c95a79e12df8701fb93f07d38202e_22636_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/c/c/1_hu867c95a79e12df8701fb93f07d38202e_22636_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;线程&#34;&gt;线程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;线程是cup调度和分配的基本单位也是cup执行的最小单位, 有独立的栈空间，共享堆空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;进程与线程的关系&#34;&gt;进程与线程的关系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一个进程可以创建和撤销多个线程， 一个进程必须有一个线程(主线程), 线程共享进程所有资源，进程是线程的容器，关系如图所示：&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 282; 
			flex-basis: 677px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/c/c/2.png&#34; data-size=&#34;491x174&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/c/c/2.png&#34;
			width=&#34;491&#34;
			height=&#34;174&#34;
			srcset=&#34;https://zcj-git520.github.io/p/c/c/2_hu53069a5ffbb3f88620ec70a2a20f56ba_161705_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/c/c/2_hu53069a5ffbb3f88620ec70a2a20f56ba_161705_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;并发与并行&#34;&gt;并发与并行&lt;/h2&gt;
&lt;h3 id=&#34;并发&#34;&gt;并发&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;并发：多进程(线程)程序在一个核cup串行运行，当一个进程(线程)阻塞的时候，切换到另外等待执行的进程(线程) 如图&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 176; 
			flex-basis: 424px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/c/c/3.png&#34; data-size=&#34;470x266&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/c/c/3.png&#34;
			width=&#34;470&#34;
			height=&#34;266&#34;
			srcset=&#34;https://zcj-git520.github.io/p/c/c/3_huf7020f04dcb48d893cde63f717a76dfc_28449_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/c/c/3_huf7020f04dcb48d893cde63f717a76dfc_28449_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;并行&#34;&gt;并行&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;并行：多线程程序在多核cup并行运行，如图&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 193; 
			flex-basis: 463px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/c/c/4.png&#34; data-size=&#34;535x277&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/c/c/4.png&#34;
			width=&#34;535&#34;
			height=&#34;277&#34;
			srcset=&#34;https://zcj-git520.github.io/p/c/c/4_hu785964094345562635a27d3f581c929f_23668_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/c/c/4_hu785964094345562635a27d3f581c929f_23668_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;用户态和内核态用户空间和内核空间&#34;&gt;用户态和内核态(用户空间和内核空间)&lt;/h2&gt;
&lt;h3 id=&#34;特权级划分&#34;&gt;特权级划分&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;cpu一共有0～4四个特权级，R0级最高，R3级最低。用户态指的是：程序运行在R3级以上，通常在应用程序中运行，内核态是指：程序运行在R0级以上，通常在内核中运行。一般来说，我们写的应用程序就是运行在R3级衣以上。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3中种用户态与内核态的切换&#34;&gt;3中种用户态与内核态的切换&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;系统调用：用户态进程通过系统调用申请使用操作系统提供的服务程序完成工作，比如前例中fork()实际上就是执行了一个创建新进程的系统调用。而系统调用的机制其核心还是使用了操作系统为用户特别开放的一个中断来实现，例如Linux的int 80h中断。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;异常：当CPU在执行运行在用户态下的程序时，发生了某些事先不可知的异常，这时会触发由当前运行进程切换到处理此异常的内核相关程序中，也就转到了内核态，比如缺页异常。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外围设备的中断： 当外围设备完成用户请求的操作后，会向CPU发出相应的中断信号，这时CPU会暂停执行下一条即将要执行的指令转而去执行与中断信号对应的处理程序，如果先前执行的指令是用户态下的程序，那么这个转换的过程自然也就发生了由用户态到内核态的切换。比如硬盘读写操作的完成，系统会切换到硬盘读写的中断处理程序中执行后续操作等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户态与内核态结构如图：&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 121; 
			flex-basis: 291px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/c/c/5.png&#34; data-size=&#34;638x526&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/c/c/5.png&#34;
			width=&#34;638&#34;
			height=&#34;526&#34;
			srcset=&#34;https://zcj-git520.github.io/p/c/c/5_hua341d62eb4441aa20e3670f5a5321e7c_124841_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/c/c/5_hua341d62eb4441aa20e3670f5a5321e7c_124841_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户态与内核态的切换是需要开销&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;来源：linux用户态和内核态理解(&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/weifeng1463/p/11660260.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.cnblogs.com/weifeng1463/p/11660260.html&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;进程与线程用户态到内核态的开销&#34;&gt;进程与线程用户态到内核态的开销&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;多进程(线程)可以提高cpu的利用率，减少程序阻塞带来cpu闲置的情况，也就是提升cpu的运行时间片，但是过多的创建进程(线程)也会花费额外的cpu时间片进行进程(线程)的花销。进程的创建、就绪、运行、阻塞、终止，这些都会带来cup花销。例如在32位的操作系统中创建一个进程需要开辟4GB的虚拟内存空间，创建一个线程需要占用约4MB的内存。&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 172; 
			flex-basis: 413px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/c/c/6.png&#34; data-size=&#34;1002x582&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/c/c/6.png&#34;
			width=&#34;1002&#34;
			height=&#34;582&#34;
			srcset=&#34;https://zcj-git520.github.io/p/c/c/6_hud198df65b05650e861fc5dc9032c3d5f_195182_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/c/c/6_hud198df65b05650e861fc5dc9032c3d5f_195182_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程(线程)的调度也会带来cup的花销。cup进程(线程)的调度就是进程(线程)切换，进程(线程)的切换就会进行线程在内核态的调度。cup切换的内核态的线程，不操作用户态的线程，用户态线程通过系统调用触发内核线程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为减少cpu内核态线程之间的切换，操作系统中使用(用户态进程(线程):内核态进程(线程))1:1，用户态直接通过系统，直接与内核态的线程一一对应。如图&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 87; 
			flex-basis: 209px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/c/c/7.png&#34; data-size=&#34;649x742&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/c/c/7.png&#34;
			width=&#34;649&#34;
			height=&#34;742&#34;
			srcset=&#34;https://zcj-git520.github.io/p/c/c/7_hub3d98815bced38b8bc21c868cdbcca3f_129141_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/c/c/7_hub3d98815bced38b8bc21c868cdbcca3f_129141_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户态一个进程(线程)对应一个内核态的进程(线程)是减少了内核态中进程(线程)切换的花销，但是也增加了内核态中进程(线程)创建的开销。减少内核态中进程(线程)切换与创建带来的开销，操作系统中使用(用户态进程(线程):内核态进程(线程))N:1，减少内核态中进程(线程)的创建，同时在用户态进行线程的之间的切换，不牵连内核态线程的切换，减少cup的花销。
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 129; 
			flex-basis: 310px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/c/c/8.png&#34; data-size=&#34;947x733&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/c/c/8.png&#34;
			width=&#34;947&#34;
			height=&#34;733&#34;
			srcset=&#34;https://zcj-git520.github.io/p/c/c/8_huc6701a49375d06381df34c24cc00a698_215784_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/c/c/8_huc6701a49375d06381df34c24cc00a698_215784_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虽然N:1减少内核态中进程(线程)切换与创建带来的开销，但是当用户态的进程(线程)阻塞时，其他进程(线程)就只能等待，这造成与单线程一样的问题。操作系统结合1:1和n:1模型的有点形成n:m模型，内核态中进程(线程)进入阻塞状态时， 用户态的进程(线程)切换另一个内核态中的线程。&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 124; 
			flex-basis: 298px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/c/c/9.png&#34; data-size=&#34;832x670&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/c/c/9.png&#34;
			width=&#34;832&#34;
			height=&#34;670&#34;
			srcset=&#34;https://zcj-git520.github.io/p/c/c/9_hud3b7e360612e399d72998f5a6843f71d_181995_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/c/c/9_hud3b7e360612e399d72998f5a6843f71d_181995_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;协程&#34;&gt;协程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;协程和线程一样有独立的栈空间，共享堆空间，是用户级的线程，是有用户自己调度。一个线程可以创建多个协程，协程是轻量级的线程。创建一个协程只需要占用4~5kB的虚拟内存，创建协程的开销相比进程与线程低太多了。&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 231; 
			flex-basis: 555px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/c/c/10.png&#34; data-size=&#34;808x349&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/c/c/10.png&#34;
			width=&#34;808&#34;
			height=&#34;349&#34;
			srcset=&#34;https://zcj-git520.github.io/p/c/c/10_hu5bb3a4baa791897c79c1df91e792ef0e_243913_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/c/c/10_hu5bb3a4baa791897c79c1df91e792ef0e_243913_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;p&gt;1、&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/337978321&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/337978321&lt;/a&gt;
2、&lt;a class=&#34;link&#34; href=&#34;https://www.jianshu.com/p/fa696563c38a&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.jianshu.com/p/fa696563c38a&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>go map的深入理解</title>
        <link>https://zcj-git520.github.io/p/go-map%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</link>
        <pubDate>Mon, 20 Sep 2021 22:00:38 +0800</pubDate>
        
        <guid>https://zcj-git520.github.io/p/go-map%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</guid>
        <description>&lt;img src="https://zcj-git520.github.io/p/go-map%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/3.png" alt="Featured image of post go map的深入理解" /&gt;&lt;h1 id=&#34;goland-基础之map&#34;&gt;goland 基础之map&lt;/h1&gt;
&lt;h2 id=&#34;map的内部结构&#34;&gt;map的内部结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;go map是使用的哈希表构建的&lt;/li&gt;
&lt;li&gt;map的结构可分为：hmap的结构体和bmap(桶)，hmap结构体记录这map的基础信息(包括map存储个数，
桶的个数，hash种子，桶的数据，扩容时旧桶的数据以及迁移个数（map扩容不是一次性迁移完）)&lt;/li&gt;
&lt;li&gt;源码如下&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;定义hmap的结构：
type hmap struct {
	// Note: the format of the hmap is also encoded in cmd/compile/internal/gc/reflect.go.
	// Make sure this stays in sync with the compiler&#39;s definition.
    // map 存储元素的计数
	count     int // # live cells == size of map.  Must be first (used by len() builtin)
    flags     uint8 // map的状态标识，桶是否在增改，扩容或者缩容
    //桶的个数/采用的与运算法计算桶的个数，桶的个数为2的整数次幂
	B         uint8  // log_2 of # of buckets (can hold up to loadFactor * 2^B items)
	//溢出的桶的数量的近似值
    noverflow uint16 // approximate number of overflow buckets; see incrnoverflow for details
	hash0     uint32 // hash seed
    //指向桶数据的指针
	buckets    unsafe.Pointer // array of 2^B Buckets. may be nil if count==0.
	// 指向旧桶数据的指针
    oldbuckets unsafe.Pointer // previous bucket array of half the size, non-nil only when growing
	//扩容计数
    nevacuate  uintptr        // progress counter for evacuation (buckets less than this have been evacuated)
    // 保存溢出桶的链表和未使用的溢出桶数组的首地址
	extra *mapextra // optional fields
}
// 桶的实现结构
type bmap struct {
	// 当前版本bucketCnt的值是8，一个桶最多存储8个key-value对
	tophash [bucketCnt]uint8
}

&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;bmap存储结构如图所示&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 142; 
			flex-basis: 341px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/go-map%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/1.png&#34; data-size=&#34;631x444&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/go-map%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/1.png&#34;
			width=&#34;631&#34;
			height=&#34;444&#34;
			srcset=&#34;https://zcj-git520.github.io/p/go-map%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/1_hu1600ca2579a18bcbdc1f1a6cd5b9810d_76803_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/go-map%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/1_hu1600ca2579a18bcbdc1f1a6cd5b9810d_76803_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;前8个是hash值，8个key和8个value、后面是溢出桶的指针&lt;/li&gt;
&lt;li&gt;溢出桶是减少map扩容次数，溢出桶的结构与bmap桶的结构一样的&lt;/li&gt;
&lt;li&gt;溢出桶的基础结构：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-//&#34; data-lang=&#34;//&#34;&gt;  type mapextra struct {
  	// If both key and elem do not contain pointers and are inline, then we mark bucket
  	// type as containing no pointers. This avoids scanning such maps.
  	// However, bmap.overflow is a pointer. In order to keep overflow buckets
  	// alive, we store pointers to all overflow buckets in hmap.extra.overflow and hmap.extra.oldoverflow.
  	// overflow and oldoverflow are only used if key and elem do not contain pointers.
  	// overflow contains overflow buckets for hmap.buckets.
  	// oldoverflow contains overflow buckets for hmap.oldbuckets.
  	// The indirection allows to store a pointer to the slice in hiter.
  	overflow    *[]*bmap  //记录已经被使用的溢出桶
  	oldoverflow *[]*bmap  // 扩容阶段旧的溢出桶
  
  	// nextOverflow holds a pointer to a free overflow bucket.
  	nextOverflow *bmap   //指向下一个空闲的溢出桶
  }
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;当桶的个数大于2的4次方时就会使用溢出桶源码如下&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func makeBucketArray(t *maptype, b uint8, dirtyalloc unsafe.Pointer) (buckets unsafe.Pointer, nextOverflow *bmap) {
	// 桶的个数
    base := bucketShift(b)
	nbuckets := base
	// For small b, overflow buckets are unlikely.
	// Avoid the overhead of the calculation.
	if b &amp;gt;= 4 {
        // 使用溢出桶
		// Add on the estimated number of overflow buckets
		// required to insert the median number of elements
		// used with this value of b.
		nbuckets += bucketShift(b - 4)//计算溢出桶的数量和不是溢出桶的数量的和
		sz := t.bucket.size * nbuckets
		up := roundupsize(sz)
		if up != sz {
			nbuckets = up / t.bucket.size //得出桶的数量
		}
	}

	if dirtyalloc == nil {
        // 没有被创建桶，申请创建桶的，返回桶的首地址
		buckets = newarray(t.bucket, int(nbuckets))
	} else {
		// dirtyalloc was previously generated by
		// the above newarray(t.bucket, int(nbuckets))
		// but may not be empty.
		buckets = dirtyalloc
		size := t.bucket.size * nbuckets
		if t.bucket.ptrdata != 0 {
			memclrHasPointers(buckets, size)
		} else {
			memclrNoHeapPointers(buckets, size)
		}
	}

	if base != nbuckets {
		// We preallocated some overflow buckets.
		// To keep the overhead of tracking these overflow buckets to a minimum,
		// we use the convention that if a preallocated overflow bucket&#39;s overflow
		// pointer is nil, then there are more available by bumping the pointer.
		// We need a safe non-nil pointer for the last overflow bucket; just use buckets.
		//空闲桶的地址
        nextOverflow = (*bmap)(add(buckets, base*uintptr(t.bucketsize)))
		last := (*bmap)(add(buckets, (nbuckets-1)*uintptr(t.bucketsize)))
		last.setoverflow(t, (*bmap)(buckets))
	}
	return buckets, nextOverflow
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;如图所示&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 184; 
			flex-basis: 441px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/go-map%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/2.png&#34; data-size=&#34;1636x889&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/go-map%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/2.png&#34;
			width=&#34;1636&#34;
			height=&#34;889&#34;
			srcset=&#34;https://zcj-git520.github.io/p/go-map%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/2_hu425c8a15ea5dff908d9430989255e351_318909_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/go-map%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/2_hu425c8a15ea5dff908d9430989255e351_318909_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;使用map时需要make(map[type]type,len,cap)才能使用。&lt;/li&gt;
&lt;li&gt;make 源码如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func makemap(t *maptype, hint int, h *hmap) *hmap {
    // 判断是否超过内存的限制
	mem, overflow := math.MulUintptr(uintptr(hint), t.bucket.size)
	if overflow || mem &amp;gt; maxAlloc {
		hint = 0
	}

	// initialize Hmap
	if h == nil {
		h = new(hmap)
	}
	h.hash0 = fastrand()// 获取随机的hash值

	// Find the size parameter B which will hold the requested # of elements.
	// For hint &amp;lt; 0 overLoadFactor returns false since hint &amp;lt; bucketCnt.
	B := uint8(0)
	for overLoadFactor(hint, B) {
		B++
	}
	h.B = B

	// allocate initial hash table
	// if B == 0, the buckets field is allocated lazily later (in mapassign)
	// If hint is large zeroing this memory could take a while.
	if h.B != 0 {
		var nextOverflow *bmap
        // 创建map的存储数据，返回的桶的数据的地址，下一个溢出桶的地址
		h.buckets, nextOverflow = makeBucketArray(t, h.B, nil)
		if nextOverflow != nil {
			h.extra = new(mapextra)
			h.extra.nextOverflow = nextOverflow
		}
	}

	return h
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;map的完整结构如图：
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 259; 
			flex-basis: 623px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/go-map%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/3.png&#34; data-size=&#34;1503x579&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/go-map%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/3.png&#34;
			width=&#34;1503&#34;
			height=&#34;579&#34;
			srcset=&#34;https://zcj-git520.github.io/p/go-map%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/3_hu50c7ad8b87ebb1655f26b2166388bb8a_150234_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/go-map%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/3_hu50c7ad8b87ebb1655f26b2166388bb8a_150234_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;map扩容&#34;&gt;map扩容&lt;/h2&gt;
&lt;h3 id=&#34;扩容条件&#34;&gt;扩容条件&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;当负载因子(loadFactorNum*(bucketShift(B)/loadFactorDen&amp;gt;6.5  -&amp;gt; 翻倍扩容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当负载因子小于6.5，但是溢出桶的数量大于2的15次方  -&amp;gt; 等量扩容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;源代码如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// overLoadFactor reports whether count items placed in 1&amp;lt;&amp;lt;B buckets is over loadFactor.
// 负载因子大于6.5
func overLoadFactor(count int, B uint8) bool {
	return count &amp;gt; bucketCnt &amp;amp;&amp;amp; uintptr(count) &amp;gt; loadFactorNum*(bucketShift(B)/loadFactorDen)
}
// 溢出桶过多时
func tooManyOverflowBuckets(noverflow uint16, B uint8) bool {
	// If the threshold is too low, we do extraneous work.
	// If the threshold is too high, maps that grow and shrink can hold on to lots of unused memory.
	// &amp;quot;too many&amp;quot; means (approximately) as many overflow buckets as regular buckets.
	// See incrnoverflow for more details.
	if B &amp;gt; 15 {
		B = 15
	}
	// The compiler doesn&#39;t see here that B &amp;lt; 16; mask B to generate shorter shift code.
	return noverflow &amp;gt;= uint16(1)&amp;lt;&amp;lt;(B&amp;amp;15)
}
// 扩容源码

func hashGrow(t *maptype, h *hmap) {
	// If we&#39;ve hit the load factor, get bigger.
	// Otherwise, there are too many overflow buckets,
	// so keep the same number of buckets and &amp;quot;grow&amp;quot; laterally.
	bigger := uint8(1)
	if !overLoadFactor(h.count+1, h.B) {
        //等量扩容
		bigger = 0
		h.flags |= sameSizeGrow
	}
	oldbuckets := h.buckets
	newbuckets, nextOverflow := makeBucketArray(t, h.B+bigger, nil)// 从新分配数据地址

	flags := h.flags &amp;amp;^ (iterator | oldIterator)
	if h.flags&amp;amp;iterator != 0 {
        // 迭代的时候搬迁旧桶
		flags |= oldIterator
	}
	// commit the grow (atomic wrt gc)
	h.B += bigger  // 桶的个数
	h.flags = flags
	h.oldbuckets = oldbuckets
	h.buckets = newbuckets
	h.nevacuate = 0
	h.noverflow = 0
    // 溢出桶钻便为旧溢出桶
	if h.extra != nil &amp;amp;&amp;amp; h.extra.overflow != nil {
		// Promote current overflow buckets to the old generation.
		if h.extra.oldoverflow != nil {
			throw(&amp;quot;oldoverflow is not nil&amp;quot;)
		}
		h.extra.oldoverflow = h.extra.overflow
		h.extra.overflow = nil
	}
	if nextOverflow != nil {
		if h.extra == nil {
			h.extra = new(mapextra)
		}
		h.extra.nextOverflow = nextOverflow
	}

	// the actual copying of the hash table data is done incrementally
	// by growWork() and evacuate().
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;p&gt;1.&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/people/kylin-lab&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zhihu.com/people/kylin-lab&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>syslog日志转发配置</title>
        <link>https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Mon, 20 Sep 2021 22:00:38 +0800</pubDate>
        
        <guid>https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/</guid>
        <description>&lt;img src="https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/8.png" alt="Featured image of post syslog日志转发配置" /&gt;&lt;h2 id=&#34;服务器配置服务器平台x86&#34;&gt;服务器配置(服务器平台：x86)&lt;/h2&gt;
&lt;h3 id=&#34;rsyslog简介&#34;&gt;Rsyslog简介&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Rsyslog是一个 syslogd 的多线程增强版，在syslog的基础上扩展了很多其他功能，如数据库支持(MySQL, PostgreSQL、Oracle等)、日志内容筛选、定义日志格式模板等。除了默认的udp协议外，rsyslog还支持tcp协议来接收日志。&lt;/li&gt;
&lt;li&gt;目前的linux的发行版都切换为rsyslog&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安装rsyslog&#34;&gt;安装Rsyslog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Linux的发行版中预先安装了Rsyslog,无需安装，rsyslogd –v 查看版本&lt;/li&gt;
&lt;li&gt;若未安装，以下是安装步骤：
1.ubuntu：sudo apt install rsyslog
2.CentOS：yum install rsyslog&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rsyslogconf配置文件详解&#34;&gt;Rsyslog.conf配置文件详解&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;配置文件位置：/etc/rsyslog.conf
#### MODULES ####               #定义日志的模块。
$ModLoad imuxsock             #imuxsock为模块名，支持本地系统日志的模块。
$ModLoad imjournal            #imjournal为模块名，支持对系统日志的访问。
#$ModLoad imklog               #imklog为模块名，支持内核日志的模块。
#$ModLoad immark               #immark为模块名，支持日志标记。
# Provides UDP syslog reception   #提供udp syslog的接收。
#$ModLoad imudp               #imudp为模块名，支持udp协议。
#$UDPServerRun 514               #允许514端口接收使用udp和tcp转发来的日志。
# Provides TCP syslog reception       #提供tcp syslog的接收。
#$ModLoad imtcp              #imtcp为模块名，支持tcp协议。
#$InputTCPServerRun 514

#### GLOBAL DIRECTIVES ####    #定义全局日志格式的指令。
# Where to place auxiliary files
$WorkDirectory /var/lib/rsyslog       #工作目录。
# Use default timestamp format
$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat  #定义日志格式默认模板。
$IncludeConfig /etc/rsyslog.d/*.conf                     #所有配置文件路径。
$OmitLocalLogging on                                      #省略本地登录。
# File to store the position in the journal
$IMJournalStateFile imjournal.state

#### RULES ####
#kern.*                                  /dev/console
#记录所有日志类型的info级别以及大于info级别的信息到messages文件，但是mail邮件信息，authpriv验证方面的信息和corn时间和任务相关信息除外。
*.info;mail.none;authpriv.none;cron.none      /var/log/messages

# authpriv验证相关的所有信息存放在/var/log/secure。
authpriv.*                                /var/log/secure

#邮件的所有信息存在/var/log/maillog；这里有一个“-”符号表示是使用异步的方式记录
mail.*                                   -/var/log/maillog

#任务计划有关的信息存放在/var/log/cron。
cron.*                                   /var/log/cron

#记录所有的≥emerg级别信息，发送给每个登录到系统的日志。
*.emerg                                 :omusrmsg:*

#记录uucp，news.crit等存放在/var/log/spooler
uucp,news.crit                            /var/log/spooler

#本地服务器的启动的所有日志存放在/var/log/boot.log
local7.*                                  /var/log/boot.log

以下为：rsyslog 客服端的配置
#发送日志，@表示传输协议（@表示udp，@@表示tcp），后面是ip和端口。
#*.* @@remote-host:514
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;配置服务器&#34;&gt;配置服务器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用sudo vi /etc/rsyslog.conf 打开配置文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;选择传输的协议&#34;&gt;选择传输的协议&lt;/h4&gt;
&lt;p&gt;1.使用udp传输日志，配置时将前面的#去掉即可&lt;br&gt;
$ModLoad imudp&lt;br&gt;
$UDPServerRun 514&lt;br&gt;
2.使用tcp传输协议, 将#去点即可&lt;br&gt;
$ModLoad imtcp&lt;br&gt;
$InputTCPServerRun 514&lt;br&gt;
配置如图：&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 359; 
			flex-basis: 863px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/1.png&#34; data-size=&#34;554x154&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/1.png&#34;
			width=&#34;554&#34;
			height=&#34;154&#34;
			srcset=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/1_hu77084371b4080a34a3de211f1d39cdb3_32949_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/1_hu77084371b4080a34a3de211f1d39cdb3_32949_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注明：&lt;br&gt;
514/5014端口号可以自己配置，默认为514.&lt;br&gt;
rsyslog后台进程是可以同时监听TCP/UDP连接的&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;配置接收日志模板&#34;&gt;配置接收日志模板&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;在GLOBAL DIRECTIVES内容块的前面增加接收日志模板
模板如下：&lt;br&gt;
$template RemoteLogs,&amp;quot;/var/log/%HOSTNAME%/%PROGRAMNAME%.log&amp;quot;&lt;br&gt;
*.* ?RemoteLogs&lt;br&gt;
&amp;amp; ~&lt;/li&gt;
&lt;li&gt;注明：&lt;br&gt;
1、$template RemoteLogs指令（“RemoteLogs” 可以为其它的描述的名字）迫使rsyslog后台进程隔开本地/var/log/下文件去写日志信息。而日志文件名则依据发送远程日志的机器名及应用程序名来定义。&lt;br&gt;
2、*.*  ?RemoteLogs）暗含运行用模板RemoteLogs于所有的接收日志。&lt;br&gt;
3、&amp;amp; ~则告诉rsyslog后台进程停止进一步的去处理日志信息,即不对它们进行本地化写入，它是代表一个重定向规则。如果没有这一行，则意味着接收到的日志会写入两次，一次如前两行写的方式写，第二次则以本地日志记录的方式写入。运行这个规则的另一个结论则是日志服务器自己的日志信息只会写入到依照机器主机名命名的文件中。
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 426; 
			flex-basis: 1022px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/2.png&#34; data-size=&#34;554x130&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/2.png&#34;
			width=&#34;554&#34;
			height=&#34;130&#34;
			srcset=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/2_hu3baee738422c39b2b8b3a15300ae6fe7_26443_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/2_hu3baee738422c39b2b8b3a15300ae6fe7_26443_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;设置后，会按照模板格式保存日志
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1065; 
			flex-basis: 2556px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/3.png&#34; data-size=&#34;554x52&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/3.png&#34;
			width=&#34;554&#34;
			height=&#34;52&#34;
			srcset=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/3_hu8eaabc720939b9f1b459055b1ef23fcf_21246_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/3_hu8eaabc720939b9f1b459055b1ef23fcf_21246_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;设置完成保存&#34;&gt;设置完成，保存&lt;/h4&gt;
&lt;h3 id=&#34;检查rsyslog配置&#34;&gt;检查Rsyslog配置&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用命令：rsyslogd -f /etc/rsyslog.conf -N1&lt;/li&gt;
&lt;li&gt;配置信息正确有如下提示:
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1259; 
			flex-basis: 3021px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/4.png&#34; data-size=&#34;554x44&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/4.png&#34;
			width=&#34;554&#34;
			height=&#34;44&#34;
			srcset=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/4_hu7b39900913f27882a0ae7c07277316b2_23299_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/4_hu7b39900913f27882a0ae7c07277316b2_23299_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;若配置信息有误，则需要在更改配置文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重启rsyslog服务&#34;&gt;重启RSyslog服务&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Debian,Ubuntu或CentOS/RHEL 6使用:sudo service rsyslog restart&lt;/li&gt;
&lt;li&gt;Fedora 或 CentOS/RHEL 7使用：sudo systemctl restart rsyslog&lt;/li&gt;
&lt;li&gt;使用：sudo lsof -i :[端口号]，查看服务是否开启和tcp/udp连接情况
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 548; 
			flex-basis: 1316px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/5.png&#34; data-size=&#34;554x101&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/5.png&#34;
			width=&#34;554&#34;
			height=&#34;101&#34;
			srcset=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/5_hub384d36617421245c9364162c8094a34_49314_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/5_hub384d36617421245c9364162c8094a34_49314_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;或使用sudo netstat -pantu | grep rsyslog
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 748; 
			flex-basis: 1796px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/6.png&#34; data-size=&#34;554x74&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/6.png&#34;
			width=&#34;554&#34;
			height=&#34;74&#34;
			srcset=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/6_hud96afeb39ab29624ebbfb8d879fa92f8_35198_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/6_hud96afeb39ab29624ebbfb8d879fa92f8_35198_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;查看日志&#34;&gt;查看日志&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;启动客户端，进入配置文件模板中日志保存的位置：&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 971; 
			flex-basis: 2332px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/7.png&#34; data-size=&#34;554x57&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/7.png&#34;
			width=&#34;554&#34;
			height=&#34;57&#34;
			srcset=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/7_hu31450327525b5e8e578d50ab58e1813e_22403_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/7_hu31450327525b5e8e578d50ab58e1813e_22403_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 371; 
			flex-basis: 892px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/8.png&#34; data-size=&#34;554x149&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/8.png&#34;
			width=&#34;554&#34;
			height=&#34;149&#34;
			srcset=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/8_hu442c80cfdca83249146ebd0d5822289f_88346_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/8_hu442c80cfdca83249146ebd0d5822289f_88346_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;若没有生成日志文件，需要使用：sudo tcpdump host 客户端ip 查看是否转发日志，有则是保存模板出问题，没有可能的服务端配置或者客户端配置出问题&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 415; 
			flex-basis: 997px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/9.png&#34; data-size=&#34;553x133&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/9.png&#34;
			width=&#34;553&#34;
			height=&#34;133&#34;
			srcset=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/9_hud06aeafa785a175b3e704d37bde11243_109835_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/9_hud06aeafa785a175b3e704d37bde11243_109835_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;客户端配置&#34;&gt;客户端配置&lt;/h2&gt;
&lt;h3 id=&#34;平台x86&#34;&gt;平台：x86&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;平台是使用的rsyslog&lt;/li&gt;
&lt;li&gt;使用sudo vi /etc/rsyslog.conf 打开配置文件&lt;/li&gt;
&lt;li&gt;配置：&lt;br&gt;
发送日志，@表示传输协议（@表示udp，@@表示tcp），后面是ip和端口。&lt;br&gt;
*.* @@remote-host:514&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 769; 
			flex-basis: 1846px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/10.png&#34; data-size=&#34;554x72&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/10.png&#34;
			width=&#34;554&#34;
			height=&#34;72&#34;
			srcset=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/10_hu121ce9beda989ac489d36785534a4c07_11404_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/10_hu121ce9beda989ac489d36785534a4c07_11404_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检查与重启服务和x86服务器平台一样&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;平台开发板&#34;&gt;平台开发板&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;板子是使用的syslog 使用命令：ps进行查看进程&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 266; 
			flex-basis: 639px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/11.png&#34; data-size=&#34;554x208&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/11.png&#34;
			width=&#34;554&#34;
			height=&#34;208&#34;
			srcset=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/11_hu4e6e3e2c799b4a539a43c7ac3ef0cfea_64168_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/11_hu4e6e3e2c799b4a539a43c7ac3ef0cfea_64168_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;找到syslogd服务，若未找到，可能不支持syslog服务
使用命令：syslogd –h 查看syslogd支持的服务&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 271; 
			flex-basis: 651px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/12.png&#34; data-size=&#34;554x204&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/12.png&#34;
			width=&#34;554&#34;
			height=&#34;204&#34;
			srcset=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/12_hu303331932f04e72e99ec8f8ee7478f8d_60851_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/12_hu303331932f04e72e99ec8f8ee7478f8d_60851_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;配置客户端&#34;&gt;配置客户端&lt;/h3&gt;
&lt;p&gt;1.结束之前的syslogd服务，通过使用kill 进程号 结束进程&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 537; 
			flex-basis: 1290px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/13.png&#34; data-size=&#34;554x103&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/13.png&#34;
			width=&#34;554&#34;
			height=&#34;103&#34;
			srcset=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/13_hu9fb7ecb2769d8f203208712c5df5625e_31804_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/13_hu9fb7ecb2769d8f203208712c5df5625e_31804_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;
2.通过syslogd提供的服务是通过 -L  –R 服务器的ip:port&lt;br&gt;
注明：默认端口为：514,端口号应该与服务器配置的端口号一致&lt;br&gt;
3.启动syslogd服务：/sbin/syslogd -f /etc/syslog.conf -L -R 172.16.193.204:514
4.通过tcpdump host 172.16.193.204 查看日志是否被转发到服务器&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 537; 
			flex-basis: 1290px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/13.png&#34; data-size=&#34;554x103&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/13.png&#34;
			width=&#34;554&#34;
			height=&#34;103&#34;
			srcset=&#34;https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/13_hu9fb7ecb2769d8f203208712c5df5625e_31804_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/syslog%E6%97%A5%E5%BF%97%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/13_hu9fb7ecb2769d8f203208712c5df5625e_31804_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注明：开发板的syslog支持UDP传输，需要开发板的日志文件需要在服务器打开UDP&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>go 切片的深入理解</title>
        <link>https://zcj-git520.github.io/p/go-%E5%88%87%E7%89%87%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</link>
        <pubDate>Wed, 15 Sep 2021 22:00:38 +0800</pubDate>
        
        <guid>https://zcj-git520.github.io/p/go-%E5%88%87%E7%89%87%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</guid>
        <description>&lt;img src="https://zcj-git520.github.io/p/go-%E5%88%87%E7%89%87%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/s4.png" alt="Featured image of post go 切片的深入理解" /&gt;&lt;h2 id=&#34;切片的内部结构&#34;&gt;切片的内部结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;切片的结构可分为：数组，数据（元素）的地址&amp;amp;data、也存元素个数len、可以存储多少元素cap&lt;/li&gt;
&lt;li&gt;源码如下&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;定义切片的结构：
type slice struct {
	array unsafe.Pointer   
	len   int
	cap   int
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;如图所示&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 447; 
			flex-basis: 1075px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/go-%E5%88%87%E7%89%87%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/s1.png&#34; data-size=&#34;327x73&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/go-%E5%88%87%E7%89%87%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/s1.png&#34;
			width=&#34;327&#34;
			height=&#34;73&#34;
			srcset=&#34;https://zcj-git520.github.io/p/go-%E5%88%87%E7%89%87%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/s1_hufa230f30ea970ac155f1510029c77fa1_16064_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/go-%E5%88%87%E7%89%87%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/s1_hufa230f30ea970ac155f1510029c77fa1_16064_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;avatar&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;avatar&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;var data [] int 声明一个切片，相当于生成切片的结构，data地址指针为nil, len和cap都为0。这就很清楚为什么，nil切片不可以直接使用了😄 结构如图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 425; 
			flex-basis: 1020px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/go-%E5%88%87%E7%89%87%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/s2.png&#34; data-size=&#34;357x84&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/go-%E5%88%87%E7%89%87%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/s2.png&#34;
			width=&#34;357&#34;
			height=&#34;84&#34;
			srcset=&#34;https://zcj-git520.github.io/p/go-%E5%88%87%E7%89%87%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/s2_hu3ecbacb1008bd2eb98e4b57b029321b8_19806_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/go-%E5%88%87%E7%89%87%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/s2_hu3ecbacb1008bd2eb98e4b57b029321b8_19806_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;avatar&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;avatar&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用切片时需要make([]type,len,cap)或者初始化[]type{}才能使用，这是因为在在生成切片的结构时，同时也开辟了一段新的内存，类型为type, 结构长度为cap,同时值进行初始化。&lt;/li&gt;
&lt;li&gt;make 源码如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func makeslice(et *_type, len, cap int) unsafe.Pointer {
	mem, overflow := math.MulUintptr(et.size, uintptr(cap))    // 判断是否越界
	if overflow || mem &amp;gt; maxAlloc || len &amp;lt; 0 || len &amp;gt; cap {
		// NOTE: Produce a &#39;len out of range&#39; error instead of a
		// &#39;cap out of range&#39; error when someone does make([]T, bignumber).
		// &#39;cap out of range&#39; is true too, but since the cap is only being
		// supplied implicitly, saying len is clearer.
		// See golang.org/issue/4085.
		mem, overflow := math.MulUintptr(et.size, uintptr(len))
		if overflow || mem &amp;gt; maxAlloc || len &amp;lt; 0 {
			panicmakeslicelen()       // 越界直接 panic
		}
		panicmakeslicecap()    // 越界直接 panic
	}

	return mallocgc(mem, et, true)  //开辟内存
}
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 318; 
			flex-basis: 763px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/go-%E5%88%87%E7%89%87%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/s3.png&#34; data-size=&#34;525x165&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/go-%E5%88%87%E7%89%87%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/s3.png&#34;
			width=&#34;525&#34;
			height=&#34;165&#34;
			srcset=&#34;https://zcj-git520.github.io/p/go-%E5%88%87%E7%89%87%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/s3_hu288b58219022501a33ccafd08b91cbd7_40298_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/go-%E5%88%87%E7%89%87%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/s3_hu288b58219022501a33ccafd08b91cbd7_40298_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;avatar&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;avatar&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;也可以通过底层数组初始化，切片的data指针指向就是相同类型的底层数组；通过slince := array[n:m],表示定义了一个类型和array相同，len为m-n,cap默认为array的长度的切片。切片和数组都指向了相同的地址。多个切片可以共用同一个底层数组。
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 195; 
			flex-basis: 468px&#34;
	&gt;
	&lt;a href=&#34;https://zcj-git520.github.io/p/go-%E5%88%87%E7%89%87%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/s4.png&#34; data-size=&#34;531x272&#34;&gt;
		&lt;img src=&#34;https://zcj-git520.github.io/p/go-%E5%88%87%E7%89%87%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/s4.png&#34;
			width=&#34;531&#34;
			height=&#34;272&#34;
			srcset=&#34;https://zcj-git520.github.io/p/go-%E5%88%87%E7%89%87%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/s4_hu1fce009c184102799b4a69d72efc8ec2_68940_480x0_resize_box_3.png 480w, https://zcj-git520.github.io/p/go-%E5%88%87%E7%89%87%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/s4_hu1fce009c184102799b4a69d72efc8ec2_68940_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;avatar&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;avatar&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过append 函数向切片增加切片的元素，增加了len, cap 不变。&lt;/p&gt;
&lt;h2 id=&#34;切片扩容&#34;&gt;切片扩容&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在资源充裕的条件下，切片是可以通过append不断增加元素，当len个数增加到cap一样时，在增加元素时，就需要增加切片的容量cap，那问题来了，切片是怎么扩容的呢？&lt;/p&gt;
&lt;h3 id=&#34;扩容规则预估规则&#34;&gt;扩容规则（预估规则）&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;当需要扩容的数量比之前cap的两倍都大，则扩容为需要扩容的数量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当需要扩容的数量比之前cap的两倍都大小，之前的cap小于1024 直接扩大之前的2倍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当需要扩容的数量比之前cap的两倍都大小，之前的cap大于1024 直接扩大之前的1.25倍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;伪代码如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;if oldcap&lt;em&gt;2  &amp;lt; newcap 时， 扩容为newcap
else{ if oldcap &amp;lt; 1024     newcap = 2&lt;/em&gt;oldcap     ;  else           newcap = 1.25*oldcap }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;源代码如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;newcap := old.cap
	doublecap := newcap + newcap     //两倍的oldcap
	if cap &amp;gt; doublecap {
//当需要扩容的数量比之前cap的两倍都大，则扩容为需要扩容的数量
		newcap = cap   
	} else {
//当需要扩容的数量比之前cap的两倍都大小，之前的cap小于1024 直接扩大之前的2倍
		if old.cap &amp;lt; 1024 {   
			newcap = doublecap
		} else {
			// Check 0 &amp;lt; newcap to detect overflow
			// and prevent an infinite loop.
当需要扩容的数量比之前cap的两倍都大小，之前的cap大于1024 直接扩大之前的1.25倍
			for 0 &amp;lt; newcap &amp;amp;&amp;amp; newcap &amp;lt; cap {
				newcap += newcap / 4
			}
			// Set newcap to the requested cap when
			// the newcap calculation overflowed.
			if newcap &amp;lt;= 0 {
				newcap = cap
			}
		}
	}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;扩容调整&#34;&gt;扩容调整&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在预估扩容后，会根据内存对齐（减少内存浪费）在进行调整，代码：capmem := roundupsize(uintptr(newcap) * uintptr(et.size))newcap就是前文中计算出的newcap，et.size代表slice中一个元素的大小，capmem计算出来的就是此次扩容需要申请的内存大小。roundupsize函数就是处理内存对齐的函数&lt;/li&gt;
&lt;li&gt;源码如下&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; var overflow bool
 	var lenmem, newlenmem, capmem uintptr
 	switch {
 	case et.size == 1:    //例如byte 大小为1， 扩容的大小为向上取整的数值
 		lenmem = uintptr(old.len)
 		newlenmem = uintptr(cap)
 		capmem = roundupsize(uintptr(newcap)) 
 		overflow = uintptr(newcap) &amp;gt; maxAlloc
 		newcap = int(capmem)
 	case et.size == sys.PtrSize:
 		lenmem = uintptr(old.len) * sys.PtrSize
 		newlenmem = uintptr(cap) * sys.PtrSize
 		capmem = roundupsize(uintptr(newcap) * sys.PtrSize)
 		overflow = uintptr(newcap) &amp;gt; maxAlloc/sys.PtrSize
 		newcap = int(capmem / sys.PtrSize)
 	case isPowerOfTwo(et.size):  //处理2的倍数
 		var shift uintptr
 		if sys.PtrSize == 8 {
 			// Mask shift for better code generation.
 			shift = uintptr(sys.Ctz64(uint64(et.size))) &amp;amp; 63
 		} else {
 			shift = uintptr(sys.Ctz32(uint32(et.size))) &amp;amp; 31
 		}
 		lenmem = uintptr(old.len) &amp;lt;&amp;lt; shift
 		newlenmem = uintptr(cap) &amp;lt;&amp;lt; shift
 		capmem = roundupsize(uintptr(newcap) &amp;lt;&amp;lt; shift)
 		overflow = uintptr(newcap) &amp;gt; (maxAlloc &amp;gt;&amp;gt; shift)
 		newcap = int(capmem &amp;gt;&amp;gt; shift)
 	default:
 		lenmem = uintptr(old.len) * et.size
 		newlenmem = uintptr(cap) * et.size
 		capmem, overflow = math.MulUintptr(et.size, uintptr(newcap))
 		capmem = roundupsize(capmem)
 		newcap = int(capmem / et.size)
 	}
 
 	// The check of overflow in addition to capmem &amp;gt; maxAlloc is needed
 	// to prevent an overflow which can be used to trigger a segfault
 	// on 32bit architectures with this example program:
 	//
 	// type T [1&amp;lt;&amp;lt;27 + 1]int64
 	//
 	// var d T
 	// var s []T
 	//
 	// func main() {
 	//   s = append(s, d, d, d, d)
 	//   print(len(s), &amp;quot;\n&amp;quot;)
 	// }
 	if overflow || capmem &amp;gt; maxAlloc {
 		panic(errorString(&amp;quot;growslice: cap out of range&amp;quot;))
 	}

### 扩容后内存分配

* 分配 大于cap的内存，没有数据指针，memclrNoHeapPointers创建
* 源码如下：
  &amp;gt; 
	var p unsafe.Pointer
	if et.ptrdata == 0 {
		p = mallocgc(capmem, nil, false)
		// The append() that calls growslice is going to overwrite from old.len to cap (which will be the new length).
		// Only clear the part that will not be overwritten.
		memclrNoHeapPointers(add(p, newlenmem), capmem-newlenmem)
	} else {
		// Note: can&#39;t use rawmem (which avoids zeroing of memory), because then GC can scan uninitialized memory.
		p = mallocgc(capmem, et, true)  //分配内存地址
		if lenmem &amp;gt; 0 &amp;amp;&amp;amp; writeBarrier.enabled {
			// Only shade the pointers in old.array since we know the destination slice p
			// only contains nil pointers because it has been cleared during alloc.
			bulkBarrierPreWriteSrcOnly(uintptr(p), uintptr(old.array), lenmem-et.size+et.ptrdata)
		}
	}
	memmove(p, old.array, lenmem)  //数据迁移

	return slice{p, old.len, newcap}  
}
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>我的第一份博客</title>
        <link>https://zcj-git520.github.io/p/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%BB%BD%E5%8D%9A%E5%AE%A2/</link>
        <pubDate>Sat, 04 Sep 2021 10:05:40 +0800</pubDate>
        
        <guid>https://zcj-git520.github.io/p/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%BB%BD%E5%8D%9A%E5%AE%A2/</guid>
        <description>&lt;h3 id=&#34;为什么写博客&#34;&gt;为什么写博客&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;总结开发中遇到的问题。工作过后发现自己并不擅长对知识点的总结，导致总是遇到相同的问题，过段时间需要重新查找解决方案&lt;/li&gt;
&lt;li&gt;记录学习的知识，不断的温习。学的东西过于碎片化，导致知识不成体系。时间长了，碎片的知识也忘记了&lt;/li&gt;
&lt;li&gt;提升自己的专业技能。通过写博客提升自己的能力&lt;/li&gt;
&lt;li&gt;形成自己的技术栈，遇到的志同道合的朋友&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;为什么选择hugo来搭建自己的博客&#34;&gt;为什么选择hugo来搭建自己的博客&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。&lt;/li&gt;
&lt;li&gt;操作简单，使用Markdown直接生成静态网页&lt;/li&gt;
&lt;li&gt;免费且以维护, 在github上就可供他人访问，无需购买服务器，维护简单&lt;/li&gt;
&lt;li&gt;发表文章直接push到自己仓库即可&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;下载hogo的源码&#34;&gt;下载hogo的源码&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;git clone  &lt;a class=&#34;link&#34; href=&#34;https://github.com/gohugoio/hugo.git&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/gohugoio/hugo.git&lt;/a&gt;&lt;br&gt;
git branch 查看单前代码的分支&lt;br&gt;
git branch -a 查看全部分支&lt;br&gt;
git checkout branch 切换分支&lt;br&gt;
git branch 分支名  创建自己的本地分子&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;编译源码&#34;&gt;编译源码&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在master分支下，在main.go 的目录下使用命令: go build  在目录下生成hugo.exe&lt;/li&gt;
&lt;li&gt;在cmd下使用hugo 查看是否编译成功 编译成功 会打印hugo的版本&lt;/li&gt;
&lt;li&gt;安装成功&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;生成站点&#34;&gt;生成站点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用命令：hugo new site /目录&lt;/li&gt;
&lt;li&gt;cd /目录 查看到&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;            ▸ archetypes/  
            ▸ content/  
            ▸ layouts/  
            ▸ static/  
            config.toml
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;创建站点成功&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;创建md文章&#34;&gt;创建md文章&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用命令: hugo  new 文章名.md  在content/ 下生成该md文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;选择博客主题模板&#34;&gt;选择博客主题模板&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;hugo 提供很多的主题博客模板：https://themes.gohugo.io/&lt;/li&gt;
&lt;li&gt;创建theme文件夹，将主题模板放在里面 ：mkdir themes&lt;/li&gt;
&lt;li&gt;进入该文件夹：cd themes&lt;/li&gt;
&lt;li&gt;下载主题，使用git clone 主题模板 ：git clone &lt;a class=&#34;link&#34; href=&#34;https://github.com/spf13/hyde.git&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/spf13/hyde.git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;配置configtoml文件&#34;&gt;配置config.toml文件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;config.toul 文件hugo 的配置文件，可以配置主题模板，个人信息等(主题模板中相应的配置文件)如&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt; baseurl = &amp;quot;http://****.com/&amp;quot;  //发布的网站
 languageCode = &amp;quot;ja&amp;quot;           //使用的语言
 title = &amp;quot;xxxx.COM&amp;quot;      //网站名称等
  [Params]
  subtitle = &amp;quot;I would like to be a layer 3 switch.&amp;quot;
  facebook = &amp;quot;https://facebook.com/foobar&amp;quot;
  twitter = &amp;quot;https://twitter.com/foobar&amp;quot;
  github = &amp;quot;https://github.com/foobar&amp;quot;
  profile = &amp;quot;/images/profile.png&amp;quot;
  copyright = &amp;quot;Written by Asuka Suzuki&amp;quot;
  analytics = &amp;quot;UA-XXXXXXXX-X&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;运行&#34;&gt;运行&lt;/h3&gt;
&lt;h4 id=&#34;本地运行&#34;&gt;本地运行&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;使用命令：hugo server &amp;ndash;buildDrafts 配置正确则会出现： http://localhost:1313/ (bind address 127.0.0.1) 点击在浏览器中运行&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;推送到gitgub&#34;&gt;推送到gitgub&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;首先在GitHub上创建一个Repository，命名为：github用户名.github.io&lt;/li&gt;
&lt;li&gt;修改config.toml 配置文件：将baseurl = &amp;ldquo;http://github用户名.github.io&amp;rdquo;&lt;/li&gt;
&lt;li&gt;使用命令：hugo  &amp;ndash;buildDrafts 在本地生成public的文件夹&lt;/li&gt;
&lt;li&gt;&amp;ndash;buildDrafts 参数的主用是将你的文章在主题中出现&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;  cd public 进入到public文件夹
  $ git init  初始化本地仓库
  $ git remote add origin https://github.com/github用户名/github用户名.github.io //添加原创仓库
 或者直接 git clone 
  $ git add -A
  $ git commit -m &amp;quot;first commit&amp;quot;
  $ git push -u origin master  //推到远端
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;使用 &amp;ldquo;http://github用户名.github.io&amp;quot;就可访问&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
